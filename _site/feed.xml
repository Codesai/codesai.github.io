<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://codesai.aerobatic.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="https://codesai.aerobatic.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codesai.aerobatic.io/" rel="alternate" type="text/html" hreflang="es" /><updated>2016-11-12T17:59:13+00:00</updated><id>https://codesai.aerobatic.io//</id><title type="html">Codesai</title><entry><title type="html">Segundo Flejesai de 2016</title><link href="https://codesai.aerobatic.io/2016/11/segundo-flejesai-de-2016" rel="alternate" type="text/html" title="Segundo Flejesai de 2016" /><published>2016-11-04T18:19:11+00:00</published><updated>2016-11-04T18:19:11+00:00</updated><id>https://codesai.aerobatic.io/2016/11/segundo-flejesai-de-2016</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/11/segundo-flejesai-de-2016">&lt;p&gt;En Codesai somos un equipo distribuido. Actualmente trabajamos desde Gran Canaria, Tenerife, Barcelona, Madrid y Oviedo. Hacemos pair programming remoto, mob programming y videoconferencias semanales pero aún es muy importante reunirnos fisicamente un par de veces al año. La primera reunión fue en Las Palmas en Marzo de 2016. Nos sirvió para alinearnos, definir formas de trabajar, tomar decisiones y sobre todo compartir y hacer equipo. Esta segunda edición ha sido también en Las Palmas, los días 27 y 28 de octubre de 2016. El sitio de reunión ha sido espectacular, la sala de formación de la Galería de Arte de Manuel Ojeda, en Triana. Aprovechamos para agradecer a Manuel y Daniel Ojeda esta oportunidad, su amabilidad y su confianza.&lt;/p&gt;
&lt;p&gt;Inicialmente esto se llamaba Codesai Summit pero como ahora somos muchos (un &lt;a href=&quot;http://www.academiacanarialengua.org/palabra/fleje/&quot;&gt;fleje&lt;/a&gt;), pues se nos ocurrió renombrarlo a Flejesai. Aunque fleje se usa más en la provincia de Las Palmas que en la de Santa Cruz, aceptamos la palabra como canario interinsular :-)&lt;/p&gt;
&lt;p&gt;Fue genial contar con Antonio como facilitador durante los dos días de evento, para ponerle foco y sacar todos los temas que queríamos. El jueves facilitó la dinámica &lt;em&gt;Remember the Future&lt;/em&gt; donde imaginando que nos encontrábamos 12 meses en el futuro, hablábamos de esos últimos 12 meses como si fueran el pasado. Cada uno tuvo su turno de reflexión y luego de exposición. Alguno tuvo tiempo de escribir El Quijote en 5 minutos. Esto nos permitió a todos expresar metas y objetivos para el año. Ver en qué grado compartimos la visión y en qué grado es divergente. Posteriormente nos quedamos con los puntos más interesantes de todos los que salieron y nos pusimos a analizar juntos el por qué de esos objetivos. Este ejercicio nos sirvió para poner encima de la mesa nuestros valores y principios. Aunque sentimos que compartimos muchos valores y principios, hacerlo explícito nos ayudó a definir y aclarar ideas. A continuación nuestros &lt;strong&gt;principios y valores&lt;/strong&gt; sin ningún tipo de orden de aparición:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trabajamos con entrega, lo mejor que sabemos haberlo, aportando el máximo valor que somos capaces.&lt;/li&gt;
  &lt;li&gt;Contribuir a la evolución profesional de nuestro sector:
    &lt;ul&gt;
      &lt;li&gt;Hacer la vida más fácil a los usuarios.&lt;/li&gt;
      &lt;li&gt;Pensamos que los proyectos de desarrollo caóticos deberían ser una excepción y no la norma.&lt;/li&gt;
      &lt;li&gt;Eliminar la complejidad innecesaria.&lt;/li&gt;
      &lt;li&gt;Transmitir la pasión por lo que hacemos.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mejorar y aprender constantemente.&lt;/li&gt;
  &lt;li&gt;La satisfacción del trabajo bien hecho.&lt;/li&gt;
  &lt;li&gt;Abrirnos a otros puntos de vista.&lt;/li&gt;
  &lt;li&gt;Alinear trabajo con propósito vital.&lt;/li&gt;
  &lt;li&gt;Pertenencia y reconocimiento.&lt;/li&gt;
  &lt;li&gt;Estabilidad y sostenibilidad del grupo en lugar de crecimiento.&lt;/li&gt;
  &lt;li&gt;Diversidad en el equipo.&lt;/li&gt;
  &lt;li&gt;Poder dar a los otros lo que nos hubiera gustado tener, por ejemplo una mejor educación técnica.&lt;/li&gt;
  &lt;li&gt;Poner la tecnología al servicio del bien común.&lt;/li&gt;
  &lt;li&gt;Evitar hacer daño, evitar que la tecnología se use contra las personas, los animales o el medio ambiente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la sesión quedó claro que queremos desarrollar nuevos cursos de formación para armar un catálogo completo. Ya estamos trabajando en ello, recogiendo piedras de conocimiento para luego hacer las composiciones.&lt;/p&gt;
&lt;p&gt;Todos pensamos que la web debe expresar mejor lo que hacemos y ser un lugar donde aglutinar nuestras publicaciones, queremos mejorarla. Es muy posible que dejemos wordpress por algo mas simple.&lt;/p&gt;
&lt;p&gt;Hemos decidido dejar de utilizar las categorías de Craftsman, Journeyman, Apprentice, Junio y Senior para referirnos a lo que somos, tanto en la web como en las propuestas a clientes. Aunque a priori nos sentimos identificados con la metáfora de la artesanía del software, preferimos que la gente se haga una idea de nosotros a través de nuestros propios principios y valores.&lt;/p&gt;
&lt;p&gt;En las propuestas a proyectos para clientes no enviaremos a individuos sino como mínimo parejas. Los costes serán por tanto por parejas o grupos más grandes pero no por persona. Realmente no necesitamos categorizar a nadie. Y queremos trabajar en pares o en grupo como lo venimos haciendo.&lt;/p&gt;
&lt;p&gt;Queremos seguir teniendo presencia en eventos importantes de la comunidad, incluso dar el salto a eventos de fuera como SocratesUK. Organizar una nueva edición de Socrates Canaries nos ilusiona.&lt;/p&gt;
&lt;p&gt;Queremos balancear la carga entre trabajo de mentor y desarrollador. Nos gusta el desarrollo de producto y por eso buscamos disponer de más días donde somos desarrolladores y no mentores. Nos encanta hacer formación y mentoring pero no que sea lo mayoritario.&lt;/p&gt;
&lt;p&gt;Queremos mejorar nuestro conocimiento en el paradigma funcional porque pensamos que puede mejorar la calidad de los productos que hacemos. Mantenernos al día con nuevas tecnologías, por ejemplo temas como React y Redux. Practicar más con arquitecturas como CQRS, Event Sourcing, modelo de actores...&lt;/p&gt;
&lt;p&gt;Seguir dándole cuerpo a nuestro programa de aprendices y dar la bienvenida a nuevos aprendices, y si conseguimos que sean chicas mucho mejor.&lt;br /&gt;
No queremos crecer en número, crecer por crecer no es ningún objetivo. Pero si llega un momento en que nos sentimos cómodos y nos queremos comprometer a tener un nuevo compañero, pues nos gustaría que fuese una compañera.&lt;/p&gt;
&lt;p&gt;Durante el evento aparte de pasar todo el día juntos, tuvimos largas cenas y sesiones nocturnas de charlas técnicas y no tan técnicas hasta la madrugada, donde pudimos compartir conocimiento, que es una de las cosas que más nos gusta del grupo. Echarnos unas risas juntos y algo de trolleo entre nosotros pero en plan sanote.&lt;/p&gt;
&lt;p&gt;Hicimos retrospectiva, con un formato muy abierto donde todo el mundo podía expresar su punto de vista y nos ha salido una buena lista de acciones a realizar. Todo queda apuntado para revisarlo periódicamente y cuando nos juntemos en el próximo semestre mirar atrás y ver el avance.&lt;/p&gt;
&lt;p&gt;Estos encuentros semestrales son altamente motivadores. Ya tenemos ganas del próximo.&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">En Codesai somos un equipo distribuido. Actualmente trabajamos desde Gran Canaria, Tenerife, Barcelona, Madrid y Oviedo. Hacemos pair programming remoto, mob programming y videoconferencias semanales pero aún es muy importante reunirnos fisicamente un par de veces al año. La primera reunión fue en Las Palmas en Marzo de 2016. Nos sirvió para alinearnos, definir formas de trabajar, tomar decisiones y sobre todo compartir y hacer equipo. Esta segunda edición ha sido también en Las Palmas, los días 27 y 28 de octubre de 2016. El sitio de reunión ha sido espectacular, la sala de formación de la Galería de Arte de Manuel Ojeda, en Triana. Aprovechamos para agradecer a Manuel y Daniel Ojeda esta oportunidad, su amabilidad y su confianza.
Inicialmente esto se llamaba Codesai Summit pero como ahora somos muchos (un fleje), pues se nos ocurrió renombrarlo a Flejesai. Aunque fleje se usa más en la provincia de Las Palmas que en la de Santa Cruz, aceptamos la palabra como canario interinsular :-)
Fue genial contar con Antonio como facilitador durante los dos días de evento, para ponerle foco y sacar todos los temas que queríamos. El jueves facilitó la dinámica Remember the Future donde imaginando que nos encontrábamos 12 meses en el futuro, hablábamos de esos últimos 12 meses como si fueran el pasado. Cada uno tuvo su turno de reflexión y luego de exposición. Alguno tuvo tiempo de escribir El Quijote en 5 minutos. Esto nos permitió a todos expresar metas y objetivos para el año. Ver en qué grado compartimos la visión y en qué grado es divergente. Posteriormente nos quedamos con los puntos más interesantes de todos los que salieron y nos pusimos a analizar juntos el por qué de esos objetivos. Este ejercicio nos sirvió para poner encima de la mesa nuestros valores y principios. Aunque sentimos que compartimos muchos valores y principios, hacerlo explícito nos ayudó a definir y aclarar ideas. A continuación nuestros principios y valores sin ningún tipo de orden de aparición:


  Trabajamos con entrega, lo mejor que sabemos haberlo, aportando el máximo valor que somos capaces.
  Contribuir a la evolución profesional de nuestro sector:
    
      Hacer la vida más fácil a los usuarios.
      Pensamos que los proyectos de desarrollo caóticos deberían ser una excepción y no la norma.
      Eliminar la complejidad innecesaria.
      Transmitir la pasión por lo que hacemos.
    
  
  Mejorar y aprender constantemente.
  La satisfacción del trabajo bien hecho.
  Abrirnos a otros puntos de vista.
  Alinear trabajo con propósito vital.
  Pertenencia y reconocimiento.
  Estabilidad y sostenibilidad del grupo en lugar de crecimiento.
  Diversidad en el equipo.
  Poder dar a los otros lo que nos hubiera gustado tener, por ejemplo una mejor educación técnica.
  Poner la tecnología al servicio del bien común.
  Evitar hacer daño, evitar que la tecnología se use contra las personas, los animales o el medio ambiente.


En la sesión quedó claro que queremos desarrollar nuevos cursos de formación para armar un catálogo completo. Ya estamos trabajando en ello, recogiendo piedras de conocimiento para luego hacer las composiciones.
Todos pensamos que la web debe expresar mejor lo que hacemos y ser un lugar donde aglutinar nuestras publicaciones, queremos mejorarla. Es muy posible que dejemos wordpress por algo mas simple.
Hemos decidido dejar de utilizar las categorías de Craftsman, Journeyman, Apprentice, Junio y Senior para referirnos a lo que somos, tanto en la web como en las propuestas a clientes. Aunque a priori nos sentimos identificados con la metáfora de la artesanía del software, preferimos que la gente se haga una idea de nosotros a través de nuestros propios principios y valores.
En las propuestas a proyectos para clientes no enviaremos a individuos sino como mínimo parejas. Los costes serán por tanto por parejas o grupos más grandes pero no por persona. Realmente no necesitamos categorizar a nadie. Y queremos trabajar en pares o en grupo como lo venimos haciendo.
Queremos seguir teniendo presencia en eventos importantes de la comunidad, incluso dar el salto a eventos de fuera como SocratesUK. Organizar una nueva edición de Socrates Canaries nos ilusiona.
Queremos balancear la carga entre trabajo de mentor y desarrollador. Nos gusta el desarrollo de producto y por eso buscamos disponer de más días donde somos desarrolladores y no mentores. Nos encanta hacer formación y mentoring pero no que sea lo mayoritario.
Queremos mejorar nuestro conocimiento en el paradigma funcional porque pensamos que puede mejorar la calidad de los productos que hacemos. Mantenernos al día con nuevas tecnologías, por ejemplo temas como React y Redux. Practicar más con arquitecturas como CQRS, Event Sourcing, modelo de actores...
Seguir dándole cuerpo a nuestro programa de aprendices y dar la bienvenida a nuevos aprendices, y si conseguimos que sean chicas mucho mejor.
No queremos crecer en número, crecer por crecer no es ningún objetivo. Pero si llega un momento en que nos sentimos cómodos y nos queremos comprometer a tener un nuevo compañero, pues nos gustaría que fuese una compañera.
Durante el evento aparte de pasar todo el día juntos, tuvimos largas cenas y sesiones nocturnas de charlas técnicas y no tan técnicas hasta la madrugada, donde pudimos compartir conocimiento, que es una de las cosas que más nos gusta del grupo. Echarnos unas risas juntos y algo de trolleo entre nosotros pero en plan sanote.
Hicimos retrospectiva, con un formato muy abierto donde todo el mundo podía expresar su punto de vista y nos ha salido una buena lista de acciones a realizar. Todo queda apuntado para revisarlo periódicamente y cuando nos juntemos en el próximo semestre mirar atrás y ver el avance.
Estos encuentros semestrales son altamente motivadores. Ya tenemos ganas del próximo.</summary></entry><entry><title type="html">Damos la bienvenida a Manuel Rivero</title><link href="https://codesai.aerobatic.io/2016/11/damos-la-bienvenida-a-manuel-rivero" rel="alternate" type="text/html" title="Damos la bienvenida a Manuel Rivero" /><published>2016-11-02T22:17:14+00:00</published><updated>2016-11-02T22:17:14+00:00</updated><id>https://codesai.aerobatic.io/2016/11/damos-la-bienvenida-a-manuel-rivero</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/11/damos-la-bienvenida-a-manuel-rivero">&lt;p&gt;Menudo notición! &lt;a href=&quot;https://twitter.com/trikitrok&quot; target=&quot;_blank&quot;&gt;Manuel Rivero&lt;/a&gt; se une al equipo Codesai! Fue algo antes de Software Craftsmanship Barcelona 2016 cuando Manuel me escribió expresando su intención de venir. La verdad es que no estabamos buscando crecer en número, pero a todo el equipo le encantó la idea. La mayoría le conocíamos y le tenemos como referente en el &lt;a href=&quot;https://plus.google.com/communities/114859785439968913587&quot; target=&quot;_blank&quot;&gt;aprendizaje, en la comunidad&lt;/a&gt; y en muchos otros temas como la programación funcional. Manuel es fuente de conocimiento y no dudamos ni un segundo en aprovechar la oportunidad.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://garajeando.blogspot.com.es/2016/11/codesai.html&quot; target=&quot;_blank&quot;&gt;Este post escrito en su blog&lt;/a&gt; habla acerca de su motivación para venir, en primera persona.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codesai.com/wp-content/uploads/2016/11/IMG_0196.jpg&quot;&gt;&lt;img src=&quot;/assets/IMG_0196-1024x768.jpg&quot; alt=&quot;img_0196&quot; class=&quot;alignleft size-large wp-image-3168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Le conocí hace ya años en un curso abierto de TDD que impartí en Madrid. Es una de esas personas que se pagó el curso de su bolsillo, incluyendo viaje a otra ciudad, gastos de hotel y días de vacaciones. Este tipo de acciones dicen mucho de un profesional, no dejo de admirar a los que lo hacen y he aprendido mucho de todos ellos, además de que les sigo la pista todo lo que puedo. Desde entonces nos hemos encontrado muchas más veces en Barcelona, por ejemplo en una edición posterior del mismo curso donde me estuvo ayudando y en eventos de la comunidad. Es alucinante observar su evolución a lo largo de estos años. En todas las katas que he estado con Manuel, he aprendido cosas relevantes. Recuerdo por ejemplo el &quot;double dispatch&quot; de Kent Beck que pese a haberlo leído no lo interioricé hasta que nos lo mostró con un ejemplo. Estamos muy ilusionados con todo lo que nos va a aportar, la mejor persona que puede entrar al equipo es aquella que tiene mucho que enseñarte. Desde ya, es nuestro Jedi del Clojure y del paradigma funcional. &lt;/p&gt;
&lt;p&gt;Ahora podemos decir que Codesai tiene presencia física en Barcelona, otro motivo más para visitar más a menudo esta maravillosa ciudad. &lt;/p&gt;
&lt;p&gt;Este cambio nos ha vuelto a motivar para retomar la preparación de nuevos cursos: Diseño Orientado a Objetos, Patrones, Refactoring y pronto seguro que también nos animamos con lo funcional. También está echando una mano desde ya con el desarrollo de productos para clientes, desarrollos que estamos llevando a cabo en estos momentos, participando en las sesiones de pair programming y mob programming.&lt;/p&gt;
&lt;p&gt;Aunque lo anunciamos ahora, ya hace algunas semanas que estamos trabajando juntos. La semana pasada celebramos nuestro encuentro semestral, el Codesai Summit ahora renombrado como Flejesai (#flejesai16) y tuvimos la suerte de que aún estaba Modesto así que estabamos practicamente todos en el mismo lugar y lo pasamos genial. Pronto habrá un post sobre el Flejesai :-)&lt;/p&gt;
&lt;p&gt;Aunque no estamos buscando crecer, es decir que no tenemos por objetivo ser más personas, sí tiene que ocurrir nos gustaría mucho que fuese una chica. Pensamos que la diversidad es muy importante. Ahí lo dejo ;-)&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">Menudo notición! Manuel Rivero se une al equipo Codesai! Fue algo antes de Software Craftsmanship Barcelona 2016 cuando Manuel me escribió expresando su intención de venir. La verdad es que no estabamos buscando crecer en número, pero a todo el equipo le encantó la idea. La mayoría le conocíamos y le tenemos como referente en el aprendizaje, en la comunidad y en muchos otros temas como la programación funcional. Manuel es fuente de conocimiento y no dudamos ni un segundo en aprovechar la oportunidad.
Este post escrito en su blog habla acerca de su motivación para venir, en primera persona.

Le conocí hace ya años en un curso abierto de TDD que impartí en Madrid. Es una de esas personas que se pagó el curso de su bolsillo, incluyendo viaje a otra ciudad, gastos de hotel y días de vacaciones. Este tipo de acciones dicen mucho de un profesional, no dejo de admirar a los que lo hacen y he aprendido mucho de todos ellos, además de que les sigo la pista todo lo que puedo. Desde entonces nos hemos encontrado muchas más veces en Barcelona, por ejemplo en una edición posterior del mismo curso donde me estuvo ayudando y en eventos de la comunidad. Es alucinante observar su evolución a lo largo de estos años. En todas las katas que he estado con Manuel, he aprendido cosas relevantes. Recuerdo por ejemplo el &quot;double dispatch&quot; de Kent Beck que pese a haberlo leído no lo interioricé hasta que nos lo mostró con un ejemplo. Estamos muy ilusionados con todo lo que nos va a aportar, la mejor persona que puede entrar al equipo es aquella que tiene mucho que enseñarte. Desde ya, es nuestro Jedi del Clojure y del paradigma funcional. 
Ahora podemos decir que Codesai tiene presencia física en Barcelona, otro motivo más para visitar más a menudo esta maravillosa ciudad. 
Este cambio nos ha vuelto a motivar para retomar la preparación de nuevos cursos: Diseño Orientado a Objetos, Patrones, Refactoring y pronto seguro que también nos animamos con lo funcional. También está echando una mano desde ya con el desarrollo de productos para clientes, desarrollos que estamos llevando a cabo en estos momentos, participando en las sesiones de pair programming y mob programming.
Aunque lo anunciamos ahora, ya hace algunas semanas que estamos trabajando juntos. La semana pasada celebramos nuestro encuentro semestral, el Codesai Summit ahora renombrado como Flejesai (#flejesai16) y tuvimos la suerte de que aún estaba Modesto así que estabamos practicamente todos en el mismo lugar y lo pasamos genial. Pronto habrá un post sobre el Flejesai :-)
Aunque no estamos buscando crecer, es decir que no tenemos por objetivo ser más personas, sí tiene que ocurrir nos gustaría mucho que fuese una chica. Pensamos que la diversidad es muy importante. Ahí lo dejo ;-)</summary></entry><entry><title type="html">Estuvimos en la Software Craftsmanship BCN 2016</title><link href="https://codesai.aerobatic.io/2016/11/estuvimos-en-la-software-craftsmanship-bcn-2016" rel="alternate" type="text/html" title="Estuvimos en la Software Craftsmanship BCN 2016" /><published>2016-11-02T16:14:56+00:00</published><updated>2016-11-02T16:14:56+00:00</updated><id>https://codesai.aerobatic.io/2016/11/estuvimos-en-la-software-craftsmanship-bcn-2016</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/11/estuvimos-en-la-software-craftsmanship-bcn-2016">&lt;p&gt;&lt;img class=&quot;wp-image-3135 alignright&quot; src=&quot;/assets/84024f3efe.jpg&quot; alt=&quot;84024f3efe&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Descripción del evento&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Este año varios miembros de Codesai estuvimos en la Software Craftsmanship de Barcelona. Todo un logro viendo que las primeras entradas fueron arrasadas, algo que habla muy bien de un evento que plantea dudas sobre si debería crecer más.&lt;/p&gt;
&lt;p&gt;Por fortuna, aunque las entradas se hayan vendido tan rápido, ha habido mucha cara nueva en el evento, lo que es realmente positivo viendo que el año pasado tardaron casi una semana en terminarse y que en un principio se pensaba que la mayoría de participantes habrían acudido en anteriores ediciones.&lt;/p&gt;
&lt;p&gt;A diferencia de la Pamplona Software Craftsmanship que se realizó este mismo año el 17 y 18 de junio, el evento consta principalmente de charlas que se eligen después de que los ponentes las hayan presentado durante el C4P. Durante el último día del evento se dan unas cuantas horas para proponer sesiones para el Open Space. Contar con estos contrastes entre eventos dentro de la propia comunidad es algo muy valioso. Con cada evento al que asistimos nos percatamos que experiencias pasadas de otros eventos acaban reflejándose en mejoras para los siguientes.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignleft wp-image-3134&quot; src=&quot;/assets/e05e30e614.jpg&quot; alt=&quot;e05e30e614&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Los sponsors del evento han servido a los asistentes con una camiseta chulísima con la temática del evento y nos ofrecieron una bolsa genial con merchandising muy útil durante el evento que nos encantó a la mayoría de los asistentes. También mencionar sobre el lugar, un verdadero acierto, aunque a veces las salas se llenaban mucho y sentarse era una utopía, era muy cómodo estar en ellas y estaban muy bien ventiladas. Algo que se agradece de verdad.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Gracias a la organización!&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Sin duda, un gran evento está respaldado por una gran organización. La Software Craftsmanship BCN 16 contó con una de las mejores ;). Había disponible un tablón de feedback desde la primera hora al que le echaban un ojo y procuraban asistir en lo posible. Durante la apertura se explicó el evento, las charlas fueron sobre ruedas, sin retrasos y durante el cierre se realizó una gran retrospectiva. Si es que no se encontraron problemas por ningún lado, muchas gracias y genial trabajo!&lt;/p&gt;
&lt;p&gt;Todas las charlas fueron grabadas con el apoyo de Codely.tv y los miembros de la organización, lo cual es un fantástico aporte, pues siempre hay horas en las que no sabes a qué charla ir :)&lt;/p&gt;
&lt;p&gt;Durante el evento se agradeció el tener varios momentos en los que era sencillo disfrutar del networking.&lt;/p&gt;
&lt;p&gt;El desayuno y la comida (compuesta básicamente por pequeños snacks de la mano de un catering) se ofrecían en mesas repartidas en dos salas. Todo el mundo se dirigía a picar algo de pie mientras charlaba. Se generaba buen ambiente y se abrían las puertas al networking. Por no mencionar que la comida estaba genial!&lt;/p&gt;
&lt;p&gt;Además, siempre estaban disponibles la máquina de café y algunos refrigerios para todo aquél que se quedase fuera de una charla mientras conversaba con otros asistentes.&lt;/p&gt;
&lt;p&gt;La primera noche del evento se organizó una gran cena en un enorme local muy cerca del evento, a la que asistió casi todo el mundo. Ello permitió que el primer día no acabase a las 19h00 como marcaba la agenda, sino que se extendió hasta bastante tarde (de madrugada para los valientes ;). La cena ayudó a que se dieran más oportunidades para conocer gente y en general aumentó la sensación de participación en el evento más allá de lo que es asistir a las charlas.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-3132 aligncenter&quot; src=&quot;/assets/6db0f48d11.jpg&quot; alt=&quot;6db0f48d11&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Charlas &lt;/b&gt;&lt;b&gt;a las que asistimos&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Néstor Salceda: &lt;/b&gt;&lt;b&gt;Experiencias con Interaction Driven Design.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Néstor nos contó la experiencia de su grupo usando Interaction Driven Design. Nos sorprendió muy gratamente observar cómo grupos distintos, que no tienen mucha comunicación de forma regular, hayan llegado a conclusiones tan similares en el uso de esta arquitectura.&lt;/p&gt;
&lt;p&gt;Nos valió para confirmar muchas de nuestras propias ideas. Una charla realmente agradable donde varias personas se animaron a poner código para mostrarnos sus aproximaciones y recibir feedback, entre ellos Alfredo y Ronny.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Carlos Villuendas: &lt;/b&gt;&lt;b&gt;Reactjs desde las trincheras, un año después&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Carlos asistió el año pasado al evento dando la primera parte de esta charla. En ella comentaba que Fotocasa se había propuesto emplear React.js como librería de Frontend. Un año más tarde, vuelve a comentar cómo ha sido la experiencia. Dando todo un manual en el uso de esta librería basándose en la propias vivencias de su grupo. Una charla genial donde Carlos se mostró dispuesto a explicar con detalle cada cosa que se le preguntaba. Muy inspiradora.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Sergi González y Javier Ferrer: &lt;/b&gt;&lt;b&gt;Desarrollar un chat con Scala, Akka y WebSockets desde 0. ¡¿Qué puede salir mal?!&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Sergi y Javi nos contaron como en su empresa surgió la necesidad de meter en la aplicación un chat. Ello llevó a una primera implementación de un legacy escrito en PHP y cómo las necesidades de escalabilidad les plantearon usar modelo de actores con Akka y usar Scala como lenguaje de desarrollo. Empezando con una visión pero gran desconocimiento sobre el tema, consiguieron terminarlo después de un año y nos sirven de toda esa experiencia para hablarnos sobre ello, y acabar con nuestras mentes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Joel Rodríguez: Embracing flow for maximum productivity&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Joel nos estuvo contando la complejidad que implica alcanzar el flow y las tácticas que le han resultado efectivas en su experiencia. El flow siempre es algo que nos parece muy abstracto pero que sabemos detectar cuando lo estamos experimentando. Joel intenta convertirlo en algo que alcancemos de forma más consciente.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Xavi Gost: CDD (Desarrollo dirigido por consenso)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Xavi nos estuvo explicando cómo están aplicando esta filosofía de equipo en Flywire. A destacar el rechazo del argumento de autoridad, que implica no obedecer ciegamente a otra persona con mayor autoridad. El argumento siempre debería ser analizado y contra argumentado si fuera necesario, siempre dentro de lo razonable. Rechazar un argumento de autoridad no significa rechazar una mayor experiencia. De forma muy resumida, los equipos están organizados en squads que hacen pairing y no se hacen Pull Requests, sino que todos los miembros del equipo leen el código y son libres de añadir un Concern en una feature que se debatirá en la siguiente Code Review. Se estimula la propiedad colectiva del código y el ambiente de equipo. Una charla que nos aportó mucho valor.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-3133 aligncenter&quot; src=&quot;/assets/2520bced6c.jpg&quot; alt=&quot;2520bced6c&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Vaughn Vernon: &lt;/b&gt;&lt;b&gt;Event Storming for Fun and Profit&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;En este workshop de dos horas, Vernon nos brindó una sesión de Event Storming. Esta práctica de descubrimiento de dominio propuesta por Alberto Brandolini, consiste en unir a Product Owners y desarrolladores para crear algo parecido a un diagrama de eventos que nos permite identificar las acciones más importantes de una parte o todo nuestro negocio.&lt;/p&gt;
&lt;p&gt;Los asistentes nos dividimos en tres grupos donde modelamos un dominio a nuestra elección. La sesión fue muy divertida y los asistentes del grupo en el que estábamos salieron muy satisfechos con la actividad. Sin duda una práctica muy valiosa para descubrir negocio y que pondremos más en práctica.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Participación de Codesai&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Varios de nosotros tuvimos una o más charlas durante el evento. Carlos rompió el hielo a primera hora del primer día dando su charla &lt;b&gt;Designing in the Small. Principles and Practices&lt;/b&gt;&lt;b&gt;. &lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Durante el mismo día Alfredo dio una charla sobre &lt;b&gt;Connascense&lt;/b&gt; (que iba a presentar junto con Fran, que no pudo asistir al evento) hablando de los distintos tipos de acoplamiento  que podemos tener en cuenta para buscar heurísticas con las que evaluar nuestro código.&lt;/p&gt;
&lt;p&gt;Alfredo también participó en el OpenSpace, proponiendo una sesión sobre Microservicios. Durante una de las Lightning Talk, surgió este tema y se notaba que la gente se quedó con ganas de más. Por ello, la sala estaba a reventar y Alfredo se ofreció a empezar el debate en inglés dado que varios asistentes eran nativos. Una charla muy medida y en la que todos salieron muy contentos.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone wp-image-3131&quot; src=&quot;/assets/936382649d.jpg&quot; alt=&quot;936382649d&quot; /&gt;&lt;br /&gt;
&lt;img class=&quot;alignnone wp-image-3142&quot; src=&quot;/assets/5abd54c406.jpg&quot; alt=&quot;5abd54c406&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Entre las Lightning Talks, Luis dió una sobre la toma de decisiones en un proyecto que tiene problemas, cómo ser eficiente en la práctica, dando varios puntos y consejos basados en su propia experiencia. Dani dió otra sobre el tema de Lectura Rápida, desmitificando algunos métodos y clarificando cómo la estaba practicando, recomendando su bibliografía.&lt;/p&gt;
&lt;p&gt;Luis también facilitó la Kata Potter en el Open Space junto con Álvaro García. La retrospectiva de la kata se comió casi el siguiente slot de tiempo pues hubo un contraste de estilos muy interesante.&lt;/p&gt;
&lt;p&gt;Y muchas gracias a los compañeros de Codesai que se repartieron la asistencia a las charlas para luego poner en común lo aprendido, o que las dejaron pasar para hacer networking. Día a día mejoramos como equipo!&lt;/p&gt;</content><author><name>Daniel Ojeda y Miguel Viera</name></author><summary type="html">&amp;nbsp;
Descripción del evento
Este año varios miembros de Codesai estuvimos en la Software Craftsmanship de Barcelona. Todo un logro viendo que las primeras entradas fueron arrasadas, algo que habla muy bien de un evento que plantea dudas sobre si debería crecer más.
Por fortuna, aunque las entradas se hayan vendido tan rápido, ha habido mucha cara nueva en el evento, lo que es realmente positivo viendo que el año pasado tardaron casi una semana en terminarse y que en un principio se pensaba que la mayoría de participantes habrían acudido en anteriores ediciones.
A diferencia de la Pamplona Software Craftsmanship que se realizó este mismo año el 17 y 18 de junio, el evento consta principalmente de charlas que se eligen después de que los ponentes las hayan presentado durante el C4P. Durante el último día del evento se dan unas cuantas horas para proponer sesiones para el Open Space. Contar con estos contrastes entre eventos dentro de la propia comunidad es algo muy valioso. Con cada evento al que asistimos nos percatamos que experiencias pasadas de otros eventos acaban reflejándose en mejoras para los siguientes.

Los sponsors del evento han servido a los asistentes con una camiseta chulísima con la temática del evento y nos ofrecieron una bolsa genial con merchandising muy útil durante el evento que nos encantó a la mayoría de los asistentes. También mencionar sobre el lugar, un verdadero acierto, aunque a veces las salas se llenaban mucho y sentarse era una utopía, era muy cómodo estar en ellas y estaban muy bien ventiladas. Algo que se agradece de verdad.
&amp;nbsp;
Gracias a la organización!
Sin duda, un gran evento está respaldado por una gran organización. La Software Craftsmanship BCN 16 contó con una de las mejores ;). Había disponible un tablón de feedback desde la primera hora al que le echaban un ojo y procuraban asistir en lo posible. Durante la apertura se explicó el evento, las charlas fueron sobre ruedas, sin retrasos y durante el cierre se realizó una gran retrospectiva. Si es que no se encontraron problemas por ningún lado, muchas gracias y genial trabajo!
Todas las charlas fueron grabadas con el apoyo de Codely.tv y los miembros de la organización, lo cual es un fantástico aporte, pues siempre hay horas en las que no sabes a qué charla ir :)
Durante el evento se agradeció el tener varios momentos en los que era sencillo disfrutar del networking.
El desayuno y la comida (compuesta básicamente por pequeños snacks de la mano de un catering) se ofrecían en mesas repartidas en dos salas. Todo el mundo se dirigía a picar algo de pie mientras charlaba. Se generaba buen ambiente y se abrían las puertas al networking. Por no mencionar que la comida estaba genial!
Además, siempre estaban disponibles la máquina de café y algunos refrigerios para todo aquél que se quedase fuera de una charla mientras conversaba con otros asistentes.
La primera noche del evento se organizó una gran cena en un enorme local muy cerca del evento, a la que asistió casi todo el mundo. Ello permitió que el primer día no acabase a las 19h00 como marcaba la agenda, sino que se extendió hasta bastante tarde (de madrugada para los valientes ;). La cena ayudó a que se dieran más oportunidades para conocer gente y en general aumentó la sensación de participación en el evento más allá de lo que es asistir a las charlas.

&amp;nbsp;
&amp;nbsp;
Charlas a las que asistimos
Néstor Salceda: Experiencias con Interaction Driven Design.
Néstor nos contó la experiencia de su grupo usando Interaction Driven Design. Nos sorprendió muy gratamente observar cómo grupos distintos, que no tienen mucha comunicación de forma regular, hayan llegado a conclusiones tan similares en el uso de esta arquitectura.
Nos valió para confirmar muchas de nuestras propias ideas. Una charla realmente agradable donde varias personas se animaron a poner código para mostrarnos sus aproximaciones y recibir feedback, entre ellos Alfredo y Ronny.
Carlos Villuendas: Reactjs desde las trincheras, un año después
Carlos asistió el año pasado al evento dando la primera parte de esta charla. En ella comentaba que Fotocasa se había propuesto emplear React.js como librería de Frontend. Un año más tarde, vuelve a comentar cómo ha sido la experiencia. Dando todo un manual en el uso de esta librería basándose en la propias vivencias de su grupo. Una charla genial donde Carlos se mostró dispuesto a explicar con detalle cada cosa que se le preguntaba. Muy inspiradora.
Sergi González y Javier Ferrer: Desarrollar un chat con Scala, Akka y WebSockets desde 0. ¡¿Qué puede salir mal?!
Sergi y Javi nos contaron como en su empresa surgió la necesidad de meter en la aplicación un chat. Ello llevó a una primera implementación de un legacy escrito en PHP y cómo las necesidades de escalabilidad les plantearon usar modelo de actores con Akka y usar Scala como lenguaje de desarrollo. Empezando con una visión pero gran desconocimiento sobre el tema, consiguieron terminarlo después de un año y nos sirven de toda esa experiencia para hablarnos sobre ello, y acabar con nuestras mentes.
Joel Rodríguez: Embracing flow for maximum productivity
Joel nos estuvo contando la complejidad que implica alcanzar el flow y las tácticas que le han resultado efectivas en su experiencia. El flow siempre es algo que nos parece muy abstracto pero que sabemos detectar cuando lo estamos experimentando. Joel intenta convertirlo en algo que alcancemos de forma más consciente.
Xavi Gost: CDD (Desarrollo dirigido por consenso)
Xavi nos estuvo explicando cómo están aplicando esta filosofía de equipo en Flywire. A destacar el rechazo del argumento de autoridad, que implica no obedecer ciegamente a otra persona con mayor autoridad. El argumento siempre debería ser analizado y contra argumentado si fuera necesario, siempre dentro de lo razonable. Rechazar un argumento de autoridad no significa rechazar una mayor experiencia. De forma muy resumida, los equipos están organizados en squads que hacen pairing y no se hacen Pull Requests, sino que todos los miembros del equipo leen el código y son libres de añadir un Concern en una feature que se debatirá en la siguiente Code Review. Se estimula la propiedad colectiva del código y el ambiente de equipo. Una charla que nos aportó mucho valor.

&amp;nbsp;
Vaughn Vernon: Event Storming for Fun and Profit
En este workshop de dos horas, Vernon nos brindó una sesión de Event Storming. Esta práctica de descubrimiento de dominio propuesta por Alberto Brandolini, consiste en unir a Product Owners y desarrolladores para crear algo parecido a un diagrama de eventos que nos permite identificar las acciones más importantes de una parte o todo nuestro negocio.
Los asistentes nos dividimos en tres grupos donde modelamos un dominio a nuestra elección. La sesión fue muy divertida y los asistentes del grupo en el que estábamos salieron muy satisfechos con la actividad. Sin duda una práctica muy valiosa para descubrir negocio y que pondremos más en práctica.
&amp;nbsp;
Participación de Codesai
Varios de nosotros tuvimos una o más charlas durante el evento. Carlos rompió el hielo a primera hora del primer día dando su charla Designing in the Small. Principles and Practices. 
Durante el mismo día Alfredo dio una charla sobre Connascense (que iba a presentar junto con Fran, que no pudo asistir al evento) hablando de los distintos tipos de acoplamiento  que podemos tener en cuenta para buscar heurísticas con las que evaluar nuestro código.
Alfredo también participó en el OpenSpace, proponiendo una sesión sobre Microservicios. Durante una de las Lightning Talk, surgió este tema y se notaba que la gente se quedó con ganas de más. Por ello, la sala estaba a reventar y Alfredo se ofreció a empezar el debate en inglés dado que varios asistentes eran nativos. Una charla muy medida y en la que todos salieron muy contentos.


Entre las Lightning Talks, Luis dió una sobre la toma de decisiones en un proyecto que tiene problemas, cómo ser eficiente en la práctica, dando varios puntos y consejos basados en su propia experiencia. Dani dió otra sobre el tema de Lectura Rápida, desmitificando algunos métodos y clarificando cómo la estaba practicando, recomendando su bibliografía.
Luis también facilitó la Kata Potter en el Open Space junto con Álvaro García. La retrospectiva de la kata se comió casi el siguiente slot de tiempo pues hubo un contraste de estilos muy interesante.
Y muchas gracias a los compañeros de Codesai que se repartieron la asistencia a las charlas para luego poner en común lo aprendido, o que las dejaron pasar para hacer networking. Día a día mejoramos como equipo!</summary></entry><entry><title type="html">Muchas gracias Modesto</title><link href="https://codesai.aerobatic.io/2016/10/muchas-gracias-modesto" rel="alternate" type="text/html" title="Muchas gracias Modesto" /><published>2016-10-07T15:57:39+00:00</published><updated>2016-10-07T15:57:39+00:00</updated><id>https://codesai.aerobatic.io/2016/10/muchas-gracias-modesto</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/10/muchas-gracias-modesto">&lt;p&gt;Hace unas semanas recibimos una noticia con sabor agridulce. Nuestro gran compañero y mejor profesional, Modesto, se marcha de Codesai. No resulta fácil perder a un compañero del que todos aprendemos muchísimo y que siempre está apoyando al equipo ante cualquier dificultad. Pero la verdad es que nos alegramos de que pueda tomar el rumbo que más le beneficie en este momento. Nuestra relación no se ve afectada en absoluto y seguiremos aprendiendo juntos en los eventos de comunidad y meetups de Codesai. Las puertas siempre están abiertas para Modesto. Han sido dos años estupendos trabajando juntos, ¡hasta compartiendo piso!&lt;/p&gt;
&lt;p&gt;Modesto habla de la experiencia en &lt;a href=&quot;http://www.modestosanjuan.com/nuevos-retos/&quot; target=&quot;_blank&quot;&gt;un post en su blog&lt;/a&gt;. Queremos aprovechar para escribir un pequeño homenaje como muestra de agradecimiento por su entrega y su aporte a todo el equipo. Esto es lo que cada uno de nosotros dice:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Carlos:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He conocido a pocas personas capaces de aprender y asimilar tan rápido como Modesto. Con capacidad de sacarle infinidad de horas de rendimiento al día. Es rápido y eficaz ofreciendo soluciones. No sé cómo le da tiempo a leer tanto. Contar con él como experto en la plataforma .Net suponía una tranquilidad que no tiene precio. Se nos va uno de nuestros mayores tecnólogos. Solo espero que volvamos a coincidir pronto y que le vaya de maravilla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fran:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pragmatismo y capacidad de aprender a un ritmo increíble son dos de las cosas que me llegan a la cabeza cuando intento definir alguna de las cualidades de Modesto como profesional. Sus conocimientos en tecnologías de Microsoft son un seguro de vida para embarcarte en un proyecto que trate con ellas sin temer por su tamaño. Su humor y las ganas de debatir siempre hacen que cualquier charla deje de convertirse en banal para tornarse en alguna discusión interesante. He aprendido mucho estos años de él dentro de Codesai y espero que, aunque quizás con menos frecuencia, lo siga haciendo. No hace falta que le desee suerte allá dónde vaya, ya lleva una mochila repleta de habilidades y experiencias para hacer lo que le apasione.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alfredo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hace ya dos años, madre mía como pasa el tiempo de rápido!, nos juntamos cuatro locos para colaborar y trabajar juntos en un proyecto con mucha incertidumbre y muchas incógnitas, ni cortos ni perezosos cogimos las maletas y allá aparecimos en las palmas. Uno de esos locos era Modesto, y sin duda gracias a sus aportaciones ese proyecto hoy podemos apuntarlo en la libreta de éxitos profesionales y también en la de los personales. Sus conocimientos de .NET han sido fundamentales para compensar las carencias que otros teníamos,  no deja de ser sorprendente ver como al final la tecnología es solo un detalle y lo que nos une como profesionales esta en la pasión por nuestro trabajo y en las prácticas y los principios esos que tan pesados somos repitiendo y no voy a enumerar ahora.  Mucha suerte en tus proyectos futuros!, y para terminar tópicazo: esto no es un adios es un hasta luego, porque al final este mundo nuestro es más pequeño de lo que parece y el camino del craftsman  esta lleno de cruces e intersecciones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Luis:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No me cabe la menor duda que Modesto disfrutará y dejará huella allí donde esté. A mí me gustaría destacar su lado humano: la capacidad de ponerse en el lugar del otro y hablar desde ahí. Con una facilidad para hablar claro y mantener un debate profundo a la vez que aportar toques de humor cuando hay que relajar el ambiente. Muchas gracias por tu disposición a echar una mano siempre. Nos vemos en el camino.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ronny:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hablar de Modesto para mí es en primer lugar hablar de una persona a la que aprecio muchísimo. Desde el día que lo conocí en un coding dojo hasta hoy que escribo esto, no he parado de aprender de él. Sin duda, es una de las personas más inteligentes que conozco, pero si hay algo que me gustaría resaltar de él, es su pasión por el software. Me ha transmitido grandes valores como la humildad y la transparencia, aprender de Modesto no solo me ha hecho mejor programador sino que también me ha ayudado a ser mejor persona. Para mí es sin duda un ejemplo a seguir. La primera semana que estuvimos en el piso fue impresionante, la recuerdo perfectamente, buscamos un pet project, me enseñó a usar dobles de pruebas, me enseñó que eran los diagramas de secuencia y más. Pero eso no es todo, sino que ha medida que ha ido pasando el año, cada semana que hemos coincidido en el piso ha sido brutal. Aprender de alguien que es técnicamente tan bueno es increíble, hemos tenido mucha suerte de contar con él. Así que Modesto, me gustaría darte las gracias. Gracias por todo lo que me has transmitido este año, gracias por mostrarte siempre dispuesto a enseñarme, gracias por todos tus consejos y gracias por ser en definitiva una gran persona. Espero que te vaya muy bien en este próximo paso en tu camino (sé que así será).  Aunque profesionalmente hablando nuestros caminos se separen, para mí seguirás siendo siempre un mentor, un compañero en el camino del aprendizaje y sobre todo un gran amigo. Espero que sean excusas suficientes para seguir teniendo nuestras largas conversaciones sobre nuestra gran pasión. Además tenemos un pet project que mantener. Mucha suerte!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Miguel:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cuando pienso en Modesto siempre se me viene a la cabeza, la palabra fascinación. Fascinación por su conocimiento técnico, fascinación por las reflexiones personales que me ha brindado, fascinación por la pasión que trasmite con un teclado en las manos y fascinación porque solo necesita dormir 4 horas al día y estar más descansado que yo :P. Creo que como grupo hemos tenido mucha suerte de contar con tu presencia, no solo por la más que conocida capacidad técnica en .NET sino porque he aprendido que no hay que tener miedo a arremangarse y meterse en el fango para solventar problemas a los que preferirías no enfrentar y hacer otras cosas ya que puedes aportar valor en ese área. Me has enseñado a tener mucho más espectro en el significado de aportar valor y quiero agradecer la cantidad de horas que nos has dedicado con nuestros pet projects, de tener una duda a altas horas de la noche y conectarte a echar una mano y dar tu punto de vista y de no tratar de servirnos en bandeja la respuesta y dejarnos experimentar por el &quot;aprendizaje por dolor&quot;. Muchas gracias por todo y de verdad espero que como menciona Alfredo, nuestros caminos se vuelvan a cruzar porque un camino es siempre mejor si vas acompañado de personas fascinantes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dani:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ahí donde vaya la conversación, Modesto siempre surge con un: &quot;Pues una vez hice eso&quot; o &quot;En tal momento trabajé en algo similar&quot;. Lleno de experiencia y con infinidad de recursos, dedicándole un buen cacho del día a seguir investigando temas, pero siempre con tiempo para responder una pregunta o echarte un cable con lo que sea. Coincidimos en muchas cosas y diferimos en otra tantas, una conversación con Modesto siempre es productiva y acabará con algo nuevo aprendido. Seguiremos charlando y nos seguiremos viendo ;), muchas gracias por todo!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jose:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Personalmente, cuando pienso en Modesto, una de las primeras cosas que se me vienen a la mente es su experiencia y su capacidad de resolución. Me hubiera encantado haber trabajado en algún proyecto con él, aunque lamentablemente no ha podido ser así. Independientemente a ello, considero que he aprendido mucho de él, ya que en cada conversación con Modesto obtienes nuevos conocimientos.&lt;/p&gt;
&lt;p&gt;A todo esto, muchas gracias por todo Modesto, por compartir tus conocimientos y experiencias con nosotros. Es una pena que te vayas del equipo, no obstante, espero que tengas mucha suerte en tu nueva etapa y que todo te vaya muy bien.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Antonio:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Esta debe ser la cuarta vez que empiezo mi parte de este post porque todos me suenan a epitafio.&lt;br /&gt;
Supongo que es porque tengo una gran sensación de pérdida y hoy sin ir más lejos, pegándome con .NET creo que vamos a echar de menos su conocimiento en el equipo.&lt;/p&gt;
&lt;p&gt;Gracias Modesto por esas conversaciones profundas. Y por enseñarme que después de un buen intercambio dialéctico se puede tener el coraje y la humildad de reconocer cuando se ha cambiado de opinión. Muy pocas veces he visto eso.&lt;/p&gt;
&lt;p&gt;¡Ala! ¡Mucha suerte en tu nueva etapa y a dar guerra en la comunidad!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">Hace unas semanas recibimos una noticia con sabor agridulce. Nuestro gran compañero y mejor profesional, Modesto, se marcha de Codesai. No resulta fácil perder a un compañero del que todos aprendemos muchísimo y que siempre está apoyando al equipo ante cualquier dificultad. Pero la verdad es que nos alegramos de que pueda tomar el rumbo que más le beneficie en este momento. Nuestra relación no se ve afectada en absoluto y seguiremos aprendiendo juntos en los eventos de comunidad y meetups de Codesai. Las puertas siempre están abiertas para Modesto. Han sido dos años estupendos trabajando juntos, ¡hasta compartiendo piso!
Modesto habla de la experiencia en un post en su blog. Queremos aprovechar para escribir un pequeño homenaje como muestra de agradecimiento por su entrega y su aporte a todo el equipo. Esto es lo que cada uno de nosotros dice:
Carlos:
He conocido a pocas personas capaces de aprender y asimilar tan rápido como Modesto. Con capacidad de sacarle infinidad de horas de rendimiento al día. Es rápido y eficaz ofreciendo soluciones. No sé cómo le da tiempo a leer tanto. Contar con él como experto en la plataforma .Net suponía una tranquilidad que no tiene precio. Se nos va uno de nuestros mayores tecnólogos. Solo espero que volvamos a coincidir pronto y que le vaya de maravilla.
Fran:
Pragmatismo y capacidad de aprender a un ritmo increíble son dos de las cosas que me llegan a la cabeza cuando intento definir alguna de las cualidades de Modesto como profesional. Sus conocimientos en tecnologías de Microsoft son un seguro de vida para embarcarte en un proyecto que trate con ellas sin temer por su tamaño. Su humor y las ganas de debatir siempre hacen que cualquier charla deje de convertirse en banal para tornarse en alguna discusión interesante. He aprendido mucho estos años de él dentro de Codesai y espero que, aunque quizás con menos frecuencia, lo siga haciendo. No hace falta que le desee suerte allá dónde vaya, ya lleva una mochila repleta de habilidades y experiencias para hacer lo que le apasione.
Alfredo:
Hace ya dos años, madre mía como pasa el tiempo de rápido!, nos juntamos cuatro locos para colaborar y trabajar juntos en un proyecto con mucha incertidumbre y muchas incógnitas, ni cortos ni perezosos cogimos las maletas y allá aparecimos en las palmas. Uno de esos locos era Modesto, y sin duda gracias a sus aportaciones ese proyecto hoy podemos apuntarlo en la libreta de éxitos profesionales y también en la de los personales. Sus conocimientos de .NET han sido fundamentales para compensar las carencias que otros teníamos,  no deja de ser sorprendente ver como al final la tecnología es solo un detalle y lo que nos une como profesionales esta en la pasión por nuestro trabajo y en las prácticas y los principios esos que tan pesados somos repitiendo y no voy a enumerar ahora.  Mucha suerte en tus proyectos futuros!, y para terminar tópicazo: esto no es un adios es un hasta luego, porque al final este mundo nuestro es más pequeño de lo que parece y el camino del craftsman  esta lleno de cruces e intersecciones.
Luis:
No me cabe la menor duda que Modesto disfrutará y dejará huella allí donde esté. A mí me gustaría destacar su lado humano: la capacidad de ponerse en el lugar del otro y hablar desde ahí. Con una facilidad para hablar claro y mantener un debate profundo a la vez que aportar toques de humor cuando hay que relajar el ambiente. Muchas gracias por tu disposición a echar una mano siempre. Nos vemos en el camino.
Ronny:
Hablar de Modesto para mí es en primer lugar hablar de una persona a la que aprecio muchísimo. Desde el día que lo conocí en un coding dojo hasta hoy que escribo esto, no he parado de aprender de él. Sin duda, es una de las personas más inteligentes que conozco, pero si hay algo que me gustaría resaltar de él, es su pasión por el software. Me ha transmitido grandes valores como la humildad y la transparencia, aprender de Modesto no solo me ha hecho mejor programador sino que también me ha ayudado a ser mejor persona. Para mí es sin duda un ejemplo a seguir. La primera semana que estuvimos en el piso fue impresionante, la recuerdo perfectamente, buscamos un pet project, me enseñó a usar dobles de pruebas, me enseñó que eran los diagramas de secuencia y más. Pero eso no es todo, sino que ha medida que ha ido pasando el año, cada semana que hemos coincidido en el piso ha sido brutal. Aprender de alguien que es técnicamente tan bueno es increíble, hemos tenido mucha suerte de contar con él. Así que Modesto, me gustaría darte las gracias. Gracias por todo lo que me has transmitido este año, gracias por mostrarte siempre dispuesto a enseñarme, gracias por todos tus consejos y gracias por ser en definitiva una gran persona. Espero que te vaya muy bien en este próximo paso en tu camino (sé que así será).  Aunque profesionalmente hablando nuestros caminos se separen, para mí seguirás siendo siempre un mentor, un compañero en el camino del aprendizaje y sobre todo un gran amigo. Espero que sean excusas suficientes para seguir teniendo nuestras largas conversaciones sobre nuestra gran pasión. Además tenemos un pet project que mantener. Mucha suerte!
Miguel:
Cuando pienso en Modesto siempre se me viene a la cabeza, la palabra fascinación. Fascinación por su conocimiento técnico, fascinación por las reflexiones personales que me ha brindado, fascinación por la pasión que trasmite con un teclado en las manos y fascinación porque solo necesita dormir 4 horas al día y estar más descansado que yo :P. Creo que como grupo hemos tenido mucha suerte de contar con tu presencia, no solo por la más que conocida capacidad técnica en .NET sino porque he aprendido que no hay que tener miedo a arremangarse y meterse en el fango para solventar problemas a los que preferirías no enfrentar y hacer otras cosas ya que puedes aportar valor en ese área. Me has enseñado a tener mucho más espectro en el significado de aportar valor y quiero agradecer la cantidad de horas que nos has dedicado con nuestros pet projects, de tener una duda a altas horas de la noche y conectarte a echar una mano y dar tu punto de vista y de no tratar de servirnos en bandeja la respuesta y dejarnos experimentar por el &quot;aprendizaje por dolor&quot;. Muchas gracias por todo y de verdad espero que como menciona Alfredo, nuestros caminos se vuelvan a cruzar porque un camino es siempre mejor si vas acompañado de personas fascinantes.
Dani:
Ahí donde vaya la conversación, Modesto siempre surge con un: &quot;Pues una vez hice eso&quot; o &quot;En tal momento trabajé en algo similar&quot;. Lleno de experiencia y con infinidad de recursos, dedicándole un buen cacho del día a seguir investigando temas, pero siempre con tiempo para responder una pregunta o echarte un cable con lo que sea. Coincidimos en muchas cosas y diferimos en otra tantas, una conversación con Modesto siempre es productiva y acabará con algo nuevo aprendido. Seguiremos charlando y nos seguiremos viendo ;), muchas gracias por todo!
Jose:
Personalmente, cuando pienso en Modesto, una de las primeras cosas que se me vienen a la mente es su experiencia y su capacidad de resolución. Me hubiera encantado haber trabajado en algún proyecto con él, aunque lamentablemente no ha podido ser así. Independientemente a ello, considero que he aprendido mucho de él, ya que en cada conversación con Modesto obtienes nuevos conocimientos.
A todo esto, muchas gracias por todo Modesto, por compartir tus conocimientos y experiencias con nosotros. Es una pena que te vayas del equipo, no obstante, espero que tengas mucha suerte en tu nueva etapa y que todo te vaya muy bien.
Antonio:
Esta debe ser la cuarta vez que empiezo mi parte de este post porque todos me suenan a epitafio.
Supongo que es porque tengo una gran sensación de pérdida y hoy sin ir más lejos, pegándome con .NET creo que vamos a echar de menos su conocimiento en el equipo.
Gracias Modesto por esas conversaciones profundas. Y por enseñarme que después de un buen intercambio dialéctico se puede tener el coraje y la humildad de reconocer cuando se ha cambiado de opinión. Muy pocas veces he visto eso.
¡Ala! ¡Mucha suerte en tu nueva etapa y a dar guerra en la comunidad!
&amp;nbsp;
&amp;nbsp;</summary></entry><entry><title type="html">Estuvimos en Habitissimo</title><link href="https://codesai.aerobatic.io/2016/10/estuvimos-en-habitissimo" rel="alternate" type="text/html" title="Estuvimos en Habitissimo" /><published>2016-10-07T11:39:27+00:00</published><updated>2016-10-07T11:39:27+00:00</updated><id>https://codesai.aerobatic.io/2016/10/estuvimos-en-habitissimo</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/10/estuvimos-en-habitissimo">&lt;p&gt;Gracias a &lt;a href=&quot;https://twitter.com/voylinux&quot;&gt;Pablo Bernardo&lt;/a&gt; y &lt;a href=&quot;https://twitter.com/jordillull&quot;&gt;Jordi Llull&lt;/a&gt; de &lt;a href=&quot;https://www.habitissimo.es/&quot;&gt;Habitissimo&lt;/a&gt;, pudimos disfrutar de tres días de trabajo y conferencias en Palma de Mallorca, en el ParcBit. Fuimos Luis Rovirosa y yo a impartir una formación de TDD y Clean Code para 15 developers entusiasmados con aprender. Nos sorprendió gratamente el ambientazo de trabajo tan bueno que se respira allí y lo chula que es la oficina, con sus salas temáticas para reuniones, ocio y hasta espacio para meditación. La gente tenía muy interiorizado lo de ser productivo con la herramienta, manejaban casi todo con shortcuts, los entornos de desarrollo eran rápidos y pulidos... gente muy joven con una capacidad de aprendizaje muy alta, las pillaban al vuelo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codesai.com/wp-content/uploads/2016/10/photo_2016-10-07_12-58-38.jpg&quot;&gt;&lt;img class=&quot;alignleft wp-image-3078 &quot; src=&quot;/assets/photo_2016-10-07_12-58-38-1024x768.jpg&quot; alt=&quot;photo_2016-10-07_12-58-38&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Durante la formación hicimos pair programming de una manera bastante ergonómica con dos teclados, dos ratones y dos pantallas conectadas a cada máquina. El espacio de trabajo quedaba muy cómodo tanto para los participantes como para nosotros que paseábamos por detrás observándoles trabajar o participando en las discusiones.&lt;br /&gt;
Lo pasamos muy bien.&lt;/p&gt;
&lt;p&gt;Conocer y trabajar para Habitissimo era especialmente atractivo para mí porque en 2010 nosotros habíamos emprendido con Maven Charts, la misma idea de Habitissimo, pero que no conseguimos rentabilizar. Aprendimos muchísimo pero económicamente fracasamos. Ver que a pesar de toda la competencia y de lo difícil que se presentaba el mercado nacional, alguien había conseguido hacer triunfar la idea, me alegra mucho. Fue un placer conocer a los fundadores y charlar un ratito con ellos. En cierto modo era como ver &quot;mi idea&quot; triunfar. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://scontent-mad1-1.cdninstagram.com/t51.2885-15/e35/14360167_901899213287787_1124782772964032512_n.jpg?ig_cache_key=MTM1MDY1Nzg5MTkzNzUwMjU3Mg%3D%3D.2&quot;&gt;&lt;img src=&quot;/assets/14360167_901899213287787_1124782772964032512_n.jpg?ig_cache_key=MTM1MDY1Nzg5MTkzNzUwMjU3Mg%3D%3D.2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El último día tuvo lugar un Code Retreat abierto a todo el mundo donde vino mucha gente para ser un día laboral, fue todo un éxito de convocatoria y lo pasamos muy bien. Por la tarde hubieron conferencias pero como teníamos vuelo nos quedamos con la pena de ver solamente una, la de &lt;a href=&quot;https://twitter.com/jllado&quot; target=&quot;_blank&quot;&gt;Juan Lladó&lt;/a&gt; sobre su experiencia con TDD, charla que me gustó mucho. Yo abrí la jornada de charlas con una sobre diseño.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pbs.twimg.com/media/CuKcgJJWcAAQZoz.jpg&quot;&gt;&lt;img class=&quot;&quot; src=&quot;/assets/CuKcgJJWcAAQZoz.jpg&quot; /&gt;&lt;/a&gt; En una de las salas de ocio había una hamaca y enseguida me acordé del &lt;a href=&quot;https://www.youtube.com/watch?v=dYBjVTMUQY0&quot; target=&quot;_blank&quot;&gt;video de Atlassian Spooning&lt;/a&gt; así que nos queda una foto para el recuerdo gracioso. No sé si después de mostrarles el vídeo harán spooning en la hamaca :-D&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">Gracias a Pablo Bernardo y Jordi Llull de Habitissimo, pudimos disfrutar de tres días de trabajo y conferencias en Palma de Mallorca, en el ParcBit. Fuimos Luis Rovirosa y yo a impartir una formación de TDD y Clean Code para 15 developers entusiasmados con aprender. Nos sorprendió gratamente el ambientazo de trabajo tan bueno que se respira allí y lo chula que es la oficina, con sus salas temáticas para reuniones, ocio y hasta espacio para meditación. La gente tenía muy interiorizado lo de ser productivo con la herramienta, manejaban casi todo con shortcuts, los entornos de desarrollo eran rápidos y pulidos... gente muy joven con una capacidad de aprendizaje muy alta, las pillaban al vuelo.

Durante la formación hicimos pair programming de una manera bastante ergonómica con dos teclados, dos ratones y dos pantallas conectadas a cada máquina. El espacio de trabajo quedaba muy cómodo tanto para los participantes como para nosotros que paseábamos por detrás observándoles trabajar o participando en las discusiones.
Lo pasamos muy bien.
Conocer y trabajar para Habitissimo era especialmente atractivo para mí porque en 2010 nosotros habíamos emprendido con Maven Charts, la misma idea de Habitissimo, pero que no conseguimos rentabilizar. Aprendimos muchísimo pero económicamente fracasamos. Ver que a pesar de toda la competencia y de lo difícil que se presentaba el mercado nacional, alguien había conseguido hacer triunfar la idea, me alegra mucho. Fue un placer conocer a los fundadores y charlar un ratito con ellos. En cierto modo era como ver &quot;mi idea&quot; triunfar. 

El último día tuvo lugar un Code Retreat abierto a todo el mundo donde vino mucha gente para ser un día laboral, fue todo un éxito de convocatoria y lo pasamos muy bien. Por la tarde hubieron conferencias pero como teníamos vuelo nos quedamos con la pena de ver solamente una, la de Juan Lladó sobre su experiencia con TDD, charla que me gustó mucho. Yo abrí la jornada de charlas con una sobre diseño.
 En una de las salas de ocio había una hamaca y enseguida me acordé del video de Atlassian Spooning así que nos queda una foto para el recuerdo gracioso. No sé si después de mostrarles el vídeo harán spooning en la hamaca :-D</summary></entry><entry><title type="html">Lo que me aporta TDD</title><link href="https://codesai.aerobatic.io/2016/10/lo-que-me-aporta-tdd" rel="alternate" type="text/html" title="Lo que me aporta TDD" /><published>2016-10-07T10:04:16+00:00</published><updated>2016-10-07T10:04:16+00:00</updated><id>https://codesai.aerobatic.io/2016/10/lo-que-me-aporta-tdd</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/10/lo-que-me-aporta-tdd">&lt;p&gt;Hace tiempo que vengo queriendo reescribir nuestro libro de TDD para mejorarlo con todo lo que hemos aprendido en estos 7 años y todo el feedback que hemos recibiendo por parte de los lectores, a los cuales estamos muy agradecidos. Pero no se cuándo me podré sentar durante un puñado de meses a abordar semejante reto.&lt;/p&gt;
&lt;p&gt;Sin embargo, los atículos y críticas destructivas que se leen sobre esta práctica de vez en cuando, tanto en inglés como en castellano, hacen que me apetezca volver a hablar de lo mucho que me aporta esta práctica.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lo que me aporta TDD:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A los programadores nos encanta el &lt;strong&gt;feedback rápido&lt;/strong&gt;, todos los que disponemos de algún &lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;/a&gt; en nuestro lenguaje, estamos encantados. En el browser es facilísimo abrir la consola para escribir una línea de JavaScript y averiguar si determinada expresión se evalúa como creemos. Igual pasa con las consolas de Ruby y de Python. Hasta para C# suelo tirar de &lt;a href=&quot;http://csharppad.com/&quot;&gt;C# Pad&lt;/a&gt; muchas veces, y de &lt;em&gt;&quot;Inmmediate Window&quot;&lt;/em&gt; en VS. Hacer pruebas rápidas y pequeñas en un REPL es una forma de TDD a mi modo de ver. Te permite avanzar en pequeños pasos seguros. A veces practicando TDD escribo un test que poco más tarde borro, porque lo único que quería era feedback rápido, no pretendía dejar una prueba escrita.&lt;/p&gt;
&lt;p&gt;El otro gran beneficio que obtengo practicando TDD es la &lt;strong&gt;simplicidad&lt;/strong&gt;. Soy un experto complicándome la vida, pero gracias a la regla de escribir el código mínimo para que el test pase y nada más, consigo implementaciones mucho más simples de las que me quedaban antes. El prestar mucha atención a las generalizaciones progresivas, como dice &lt;a href=&quot;https://en.wikipedia.org/wiki/Transformation_Priority_Premise&quot;&gt;Transformation Priority Premise&lt;/a&gt;, hace que ahora use más veces la recursividad, en soluciones que naturalmente son recursivas. Antes simplemente me volvía loco con bucles. Un efecto secundario de ir al mínimo es que se me ocurren casos de uso que ni se me habían pasado por la cabeza, a veces casos límite. Es decir que el truco de hackear la implementación para que el test pase me hace ser consciente de casos importantes a cubrir, que quizás nunca hubiese tenido en cuenta. Por tanto me ayuda a encontrar problemas más temprano.&lt;/p&gt;
&lt;p&gt;TDD me obliga a &lt;strong&gt;pensar antes de codificar&lt;/strong&gt;. Si escojo un enfoque inside-out, tengo que haber descompuesto muy bien el problema antes para estar seguro que esa pieza de bajo nivel me va a encajar en el puzzle. Si escojo outside-in me obligo a pensar en dependencias, paso de mensajes, diseño orientado a objetos. Pienso que TDD no lleva a un buen diseño por sí, pero teniendo &lt;strong&gt;conocimientos de diseño&lt;/strong&gt;, me ayuda a detectar problemas en el mismo. Por ejemplo cuando me cuesta mucho escribir un test, es porque me faltan piezas en el diseño, porque el área que estoy explorando todavía no es la más adecuada, porque estoy introduciendo demasiada complejidad.... lo tomo como una pista para replantearme el camino elegido. Y acompañado además por los micro-commits, puedo volver atrás en cualquier momento y tomar otro camino de la solución.&lt;/p&gt;
&lt;p&gt;JB Rainsberger &lt;a href=&quot;http://blog.thecodewhisperer.com/permalink/jmock-v-mockito-but-not-to-the-death&quot;&gt;dice por ejemplo&lt;/a&gt; que cuando hace TDD prefiere usar mocks en lugar de spies, porque los dolores a la hora de usar dobles son mas evidentes y eso le da más pistas sobre su diseño (ver los comentarios del post).&lt;/p&gt;
&lt;p&gt;Con TDD no me atasco, el avance es constante, me permite entrar en &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology)&quot;&gt;flow&lt;/a&gt;&lt;/strong&gt;. &lt;strong&gt;No tengo que depurar!&lt;/strong&gt; practicamente nunca tengo que depurar y cuando esto sucede es otra pista de que he dado un paso demasiado grande a la hora de descomponer el problema o de que necesito descansar porque hay un &lt;em&gt;typo&lt;/em&gt; muy chorra que no consigo encontrar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No vale para todo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hay muchísimas situaciones en las que no hago TDD, por ejemplo cuando estudio una nueva tecnología o API de un tercero. Todo gira en torno al feedback, la simplicidad y la cadencia. Cuando voy a poderle sacar partido lo uso y cuando no, pues no lo uso. Igual que ocurre con cualquier herramienta de las que tenemos disponibles. A veces al introducir una pequeña funcionalidad en un código existente o al hacer un pequeño cambio, consigo ir más rápido escribiendo el código primero, probando a mano la aplicación y después dejando un test automático de respaldo. Sucede tipicamente en sistemas legacy donde los tests tardan mucho en ejecutarse o es tan dificil de añadir un test que valido la hipótesis primero probando a mano y luego ya agregando el test.&lt;/p&gt;
&lt;p&gt;Y tu que también practicas TDD, ayúdame a recordar más beneficios, deja un comentario please ;-)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">Hace tiempo que vengo queriendo reescribir nuestro libro de TDD para mejorarlo con todo lo que hemos aprendido en estos 7 años y todo el feedback que hemos recibiendo por parte de los lectores, a los cuales estamos muy agradecidos. Pero no se cuándo me podré sentar durante un puñado de meses a abordar semejante reto.
Sin embargo, los atículos y críticas destructivas que se leen sobre esta práctica de vez en cuando, tanto en inglés como en castellano, hacen que me apetezca volver a hablar de lo mucho que me aporta esta práctica.
Lo que me aporta TDD:
A los programadores nos encanta el feedback rápido, todos los que disponemos de algún REPL en nuestro lenguaje, estamos encantados. En el browser es facilísimo abrir la consola para escribir una línea de JavaScript y averiguar si determinada expresión se evalúa como creemos. Igual pasa con las consolas de Ruby y de Python. Hasta para C# suelo tirar de C# Pad muchas veces, y de &quot;Inmmediate Window&quot; en VS. Hacer pruebas rápidas y pequeñas en un REPL es una forma de TDD a mi modo de ver. Te permite avanzar en pequeños pasos seguros. A veces practicando TDD escribo un test que poco más tarde borro, porque lo único que quería era feedback rápido, no pretendía dejar una prueba escrita.
El otro gran beneficio que obtengo practicando TDD es la simplicidad. Soy un experto complicándome la vida, pero gracias a la regla de escribir el código mínimo para que el test pase y nada más, consigo implementaciones mucho más simples de las que me quedaban antes. El prestar mucha atención a las generalizaciones progresivas, como dice Transformation Priority Premise, hace que ahora use más veces la recursividad, en soluciones que naturalmente son recursivas. Antes simplemente me volvía loco con bucles. Un efecto secundario de ir al mínimo es que se me ocurren casos de uso que ni se me habían pasado por la cabeza, a veces casos límite. Es decir que el truco de hackear la implementación para que el test pase me hace ser consciente de casos importantes a cubrir, que quizás nunca hubiese tenido en cuenta. Por tanto me ayuda a encontrar problemas más temprano.
TDD me obliga a pensar antes de codificar. Si escojo un enfoque inside-out, tengo que haber descompuesto muy bien el problema antes para estar seguro que esa pieza de bajo nivel me va a encajar en el puzzle. Si escojo outside-in me obligo a pensar en dependencias, paso de mensajes, diseño orientado a objetos. Pienso que TDD no lleva a un buen diseño por sí, pero teniendo conocimientos de diseño, me ayuda a detectar problemas en el mismo. Por ejemplo cuando me cuesta mucho escribir un test, es porque me faltan piezas en el diseño, porque el área que estoy explorando todavía no es la más adecuada, porque estoy introduciendo demasiada complejidad.... lo tomo como una pista para replantearme el camino elegido. Y acompañado además por los micro-commits, puedo volver atrás en cualquier momento y tomar otro camino de la solución.
JB Rainsberger dice por ejemplo que cuando hace TDD prefiere usar mocks en lugar de spies, porque los dolores a la hora de usar dobles son mas evidentes y eso le da más pistas sobre su diseño (ver los comentarios del post).
Con TDD no me atasco, el avance es constante, me permite entrar en flow. No tengo que depurar! practicamente nunca tengo que depurar y cuando esto sucede es otra pista de que he dado un paso demasiado grande a la hora de descomponer el problema o de que necesito descansar porque hay un typo muy chorra que no consigo encontrar.
No vale para todo:
Hay muchísimas situaciones en las que no hago TDD, por ejemplo cuando estudio una nueva tecnología o API de un tercero. Todo gira en torno al feedback, la simplicidad y la cadencia. Cuando voy a poderle sacar partido lo uso y cuando no, pues no lo uso. Igual que ocurre con cualquier herramienta de las que tenemos disponibles. A veces al introducir una pequeña funcionalidad en un código existente o al hacer un pequeño cambio, consigo ir más rápido escribiendo el código primero, probando a mano la aplicación y después dejando un test automático de respaldo. Sucede tipicamente en sistemas legacy donde los tests tardan mucho en ejecutarse o es tan dificil de añadir un test que valido la hipótesis primero probando a mano y luego ya agregando el test.
Y tu que también practicas TDD, ayúdame a recordar más beneficios, deja un comentario please ;-)
&amp;nbsp;</summary></entry><entry><title type="html">Estuvimos en la Tarugoconf</title><link href="https://codesai.aerobatic.io/2016/09/estuvimos-en-la-tarugoconf" rel="alternate" type="text/html" title="Estuvimos en la Tarugoconf" /><published>2016-09-23T08:05:17+00:00</published><updated>2016-09-23T08:05:17+00:00</updated><id>https://codesai.aerobatic.io/2016/09/estuvimos-en-la-tarugoconf</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/09/estuvimos-en-la-tarugoconf">&lt;h3&gt;¿Qué es la Tarugoconf?&lt;/h3&gt;
&lt;p&gt;El viernes pasado, 16 de septiembre de 2016, asistí como orgulloso representante de Codesai, al&lt;strong&gt; mejor evento posible que cupiese en la imaginación de &lt;a href=&quot;https://twitter.com/david_bonilla&quot; target=&quot;_blank&quot;&gt;David Bonilla&lt;/a&gt;: la &lt;a href=&quot;http://www.tarugoconf.com/&quot; target=&quot;_blank&quot;&gt;Tarugoconf&lt;/a&gt;.&lt;/strong&gt; Un evento que nunca hubiese existido si no le hubiesen dicho las tres palabras mágicas &quot;No hay huevos&quot; y que se construye bajo las siguientes premisas: Utilidad, Practicidad, Diversión y Calité.&lt;/p&gt;
&lt;p&gt;Citando la web:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;¿Qué carallo es esto?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sólo 100 entradas a la venta. 1 sólo día, 1 sólo track y 1 sólo objetivo: crear el evento sobre construcción y comercialización de Productos Digitales más awesómico y gallego del mundo. Lleno de ponentes con muchos tiros pegaos en las barricadas del mundillo tecnológico y que, en sus charlas, intentarán responder una simple pregunta:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;¿Qué cambiaría si pudiera volver 2 años atrás?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;El previo&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/invitaciontarugoconf.png&quot; alt=&quot;Invitacion Tarugoconf&quot; width=&quot;460&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;Cuando presentó el evento por primera vez e informó que &lt;strong&gt;las entradas iban a ser por invitación&lt;/strong&gt;, sabía que no iba a sentar bien y así fue. Escuché muchos comentarios y ninguno bueno; al que no le parecía innecesariamente exclusivo (como sinónimo de excluyente), le parecía que iba a ser carne delicatessen para trolls. Como reflexión David ya comentó, que para siguientes sólo una parte sería bajo invitación y el resto abierto a todo el mundo que quisiera venir.&lt;br /&gt;
A mi me parece un sistema tan bueno como cualquiera. Se quedó gente fuera, que hubiese pasado igual y en esta conferencia el tamaño sí importaba.&lt;/p&gt;
&lt;p&gt;Ah! ¡Y el evento era dos días! Organizaron para el sábado una día de 'networking family friendly' realmente prometedor. No lo disfruté, será para la próxima.&lt;/p&gt;
&lt;h3&gt;El evento&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/FPHFVqoWJgPgwJ89UdAa0TCAlbWvW1KBBG1ZLo4_a5ACi-nu862gW3cBA56rPUjpYEf6l2IjHR8GR7As_5TuhRuBmni-wOfT3vndMYUwAfjwDiEulvhEpqxzJDpNRJ-bkpJdo1XTD9rbdaccsLpMt9a0CBUTV3gHeZ7xdqkQZyB6_v5aCKl_2ZHMrRiT3vMqdFZWxFBiwmfzNyo_jjhQYbQO2dHx3Ld1QHT6dikIsx_U1bRI77hEBXi4Cr_od1Purrg86ykKSUAu9ORlIM3EMI1bXjjhzZqmi1UVh7D1agaUldU9hBsmiy6KnxS_LERwN7i1NKWIxx6g0XQ5VkRoUR86UKy99Nc1gcKQLScuU1mexvG7YQQpakFz8YGWv1FHBu7SvKCFGgOcr-6FuYLbT2zI1BitPkjzb7g7g97809P7qZOLTOl-Ukl6KAVIDTu3Jf82tdLhBet_Cgj9Y3uDpJMQayNBCP-K3uEjWpZFJsik7N0VfdhgTeZZjnoT2RnciNKE_xHNVoeTl26oJ-2YZHxwG7lqLG0j-88xZGnvJt3PTSm1Nj-MNwago-TBjD0sHmxOJNVuDL1rIhwc6W8ktPJMkGQBZlP2nf-77GHFlexELB_dyg=w1251-h938-no&quot; alt=&quot;Benvidos a la Tarugoconf!&quot; width=&quot;600&quot; height=&quot;450&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;Y llegó el gran día. Registro y café con bollos con un ambiente algo festivo. Había gente de todo el ecosistema: desarrollo, coaching, empresa, StartUps, ... caras conocidas y no tanto que invitaban a saludarse. Había conexión.&lt;/p&gt;
&lt;p&gt;Inaugura David con una minikeynote de 15 minutos en las que nos presenta la agenda, cosas prácticas como &lt;strong&gt;dónde estará la pulpeira&lt;/strong&gt;, cómo ir a la fiesta por la noche y lo más importante, la motivación de la conferencia y por qué estamos aquí hoy. Fue un momento con un montón de energía que nos ponía en situación de lo que iba a venir.&lt;/p&gt;
&lt;p&gt;Para hacer el resumen siguiente me voy a fijar en &lt;a href=&quot;https://goo.gl/photos/Z1e53MuCXuv3cshT6&quot;&gt;mis notas&lt;/a&gt; hechas con dibujitos. También podéis ver &lt;a href=&quot;https://goo.gl/photos/A31X4868VKaCPQ8o9&quot;&gt;el trabajo de Javier (@oyabun) haciendo el Live recording&lt;/a&gt; del evento.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comienza &lt;a href=&quot;http://twitter.com/JaviSantana&quot; target=&quot;_blank&quot;&gt;Javi Santana&lt;/a&gt;, CTO de &lt;a href=&quot;https://twitter.com/CARTO&quot; target=&quot;_blank&quot;&gt;Carto&lt;/a&gt;&lt;/strong&gt; con &quot;Crear software para empresacas que manejan pasta de verdad&quot;.&lt;br /&gt;
La idea principal que transmite es que si quieres &quot;gallina&quot; hay que ir a por la empresa, a instalar &quot;on premise&quot;. El cloud, la solución SAAS tiene un rendimiento muy bajo. Luego tienes que montar un super-equipo: Soluciones (Ninjas), Sales, Soporte (aka psicólogos). Refuerza algo que ya sabemos, que no hay que parar de investigar, si paras te mueres. Y termina con un mensaje, que &lt;strong&gt;el dinero mola, pero divertirse más.&lt;/strong&gt;&lt;br /&gt;
Me gustó mucho, divertida, bien estructurada y conceptos claros.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/CDI7bGxyIlstiRvszswcpudDdVSqNU478S5r7pXcscjxxn4GU0JbN8aHgH_YgIQ1l1_FokzFFBZ3qxFjfFVGjYHjudgLQMCbJt3Gyc9_WEKeVz--wiUBhoxR8I-7rchEyTnBlEKODBQKusGU2RVgn54EukOWqKYH3kn7EuW8X1MPHq0UsicmVghDeLdpCRhe-XoT7al-Jdw0eyHUrFEdz3fqcEm2bn2dFZeBC5Pqg1frzmUp8UGpC_fBK7iOYdLx5l8bTRKJhrGfbwhY9gVvi_r5ssRG3gF8aK2NHMeiMDrDOds2jeLBk1K1Y8Ly9J7yxEnD-71B5xo_vjO6Slcbx9B7gdy3x6gElkFa1g1BPM8-nmJ8CLoZROPPBKyDoomvWrIb8ZZ-RRQZgEGVYgx1Ki1UkyXZF75kqzM3o1ZxZAT8fXFoeMW_KOd8daWDBAbO0F9gqQSls5z-ht-d71TeikHd7ThkaRjhp3FoOWliNSTylubOWONIUMbNJA1AJEda4-7QKZ_b9Zc9WWxOx37c_owI8mVBtMnYkLYeXcou8iTEemrpfRlM97fd-x7Q0qB3KkykGJ2rQ-XJjUnMlHhk9c5hfDFTXonehYy7N77VcN3rYsao3Q=s938-no&quot; alt=&quot;Quest y regalinos&quot; width=&quot;551&quot; height=&quot;551&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;A continuación le toca a&lt;strong&gt; &lt;a href=&quot;https://twitter.com/jorge__galindo&quot; target=&quot;_blank&quot;&gt;Jorge Galindo&lt;/a&gt;, Product Manager de &lt;a href=&quot;https://twitter.com/47deg&quot; target=&quot;_blank&quot;&gt;47 Degrees&lt;/a&gt;,&lt;/strong&gt; una empresa que hace software para todo el mundo desde sus oficinas al lado de la Peña Camarón, en Puerto de Santa María, Cádiz, con un par. Su charla se tituló &quot;Emprender en provincias&quot;.&lt;br /&gt;
Nos contó la historia de cómo llego 47 Degrees (latitud de Seattle) a Cádiz. Como pasó la empresa por lo estados de &quot;mundo de piruleta&quot;, &quot;hecatombe mundial&quot; y a quedarse sin pasta. Desde Cádiz se tuvo que reinventar empezando en corto, consiguió llegar a empresas de Madrid tirando de networking y les fue muy bien (por aquí pasó muy rápido, me hubiese gustado saber un poco más de este éxito). Pero entraron en un bucle de mucho curro y poca pasta que les obligó a fijar un punto de no retorno en el tiempo en el que buscarían otra cosa.&lt;br /&gt;
Estando &lt;a href=&quot;https://twitter.com/raulraja&quot; target=&quot;_blank&quot;&gt;Raúl Raja&lt;/a&gt; de vacaciones en Cartagena, leyó un artículo sobre Scala, llamó inmediatamente a Jorge para decirle que &lt;strong&gt;tenían que cambiar a Scala ya.&lt;/strong&gt; Y él le respondió: &lt;strong&gt;&quot;¡Del tirón!... ¿Cómo dices que se escribe?&quot;&lt;/strong&gt;. Aparte de la broma encontraron un nicho en la programación funcional que a base de investigar, mucho open source y atraer talento, les salvó el c... ¡Hicieron hasta un framework!&lt;br /&gt;
¿Qué cambiaría Jorge? Detalles, porque estás donde estás gracias a todas las experiencias. La pregunta que te tienes que hacer es si te gusta lo que eres y lo que estás haciendo.&lt;/p&gt;
&lt;p&gt;Alguna idea: Todos los viernes mandan un correo a todo el mundo con información de en qué proyectos están y a menudo organizan actividades para todo el mundo.&lt;br /&gt;
Les preocupa crecer por encima de 30, por si se pierde la &quot;magia&quot; (palabras literales), tema que me suena bastante.&lt;br /&gt;
Charla muy potente, con buen ritmo. Quizás en la historia hay algún hueco que creo que se podría profundizar porque daría claves de cómo emprender desde fuera de Madrid, algo muy interesante para Codesai, sin duda.&lt;/p&gt;
&lt;p&gt;Antes del café una minicharla de IBM, en la que muestra la arquitectura de Cloud e IoT que hay detrás de mover un BB-8. Un toque geek molón rápido y a la yugular.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/pDsHgyxHihI5_FSvN8cRnIngENCDaOpFKsFmHH7XnQYMO7Q06Up9SnLP1D2y3esX19vjDYJ84j20_fDxEJ6TODeZ9TB1RybOEF-ngSJwv8Komulfn6pL77mnM-MXjFo5TU_C3LLs2SchdmmgRYFEBtYVVj8ohhtp7wZ-FUfvtNmyxyUZRV6uWhnKj7-bEhkOGsMczWpVVQipvNmAhrILqF2Im4UHV1Hs318XR1cgpQoFXD1nWV0_zGxUIHPIKiSDRoT8cQJmOSrE3QuqUzoNk9QaXqkUDfAOCqcTTZyxwedVZQsi7-XYlDOvZopMNTQ1z76Lao6CNwYEDLHuddR-05J77OryRAHFKTr4-bzURR39elALOCc39MeqPmWAg-xcboOfvgyh_4UPRH1A1jfqQ75Vhu0_YiOu8s3rUc0xTL6in2QVmVDyrAGGwYl0PyWY-K8MyWlvr1ODYT8cNlVVAIQwzR4lC1d4qqHPD0NiV2mty7rVVuixZzL_M0LC9BXfw6L8-Njn2yak-pTn-BJQ11EFQBuwv8y2dtQ95wDZhA2tHlMm3XfUbGjoj9PqtKC6hKQ8nOUg6Bvc9JF-j_3Muohxj59Qg2wSVLwZ7QM4AgB-j21aHA=s938-no&quot; alt=&quot;Ponentes de la mañana&quot; width=&quot;550&quot; height=&quot;550&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;Después del café empieza &lt;a href=&quot;https://twitter.com/subidubi&quot; target=&quot;_blank&quot;&gt;Jimena Catalina&lt;/a&gt;, con la charla &quot;Sácale provecho a tu diseñador&quot; (aunque en el programa era &quot;La culpa SIEMPRE es del diseñador&quot;). &lt;strong&gt;Jimena es Diseñadora visual freelance y tiene proyectos propios&lt;/strong&gt; como &lt;a href=&quot;https://twitter.com/derechupete&quot; target=&quot;_blank&quot;&gt;Recetas de Rechupete&lt;/a&gt;. Me gustó escuchar a alguien más pegado al proceso de desarrollo que veo día a día.&lt;br /&gt;
Nos explica que es fundamental que el diseñador entienda el proceso de negocio. Hay que trabajar muy cerca del equipo, porque no sólo es diseñarlo, es colaborar en lo que luego hacen con él.&lt;br /&gt;
Destaca la importancia de un buen feedback, e intentar hablar del concreto, o qué se quiere conseguir, no de emociones.&lt;br /&gt;
&lt;strong&gt; La mejor frase: &quot;Diseño NO es arte, no expresamos nuestras emociones. Somos artesanos al servicio, resolvemos necesidades&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El toque de inversor potente vino a cargo de&lt;strong&gt; &lt;a href=&quot;https://twitter.com/jjmata&quot; target=&quot;_blank&quot;&gt;Juanjo Mata&lt;/a&gt;. Español en los USA desde hace 25 años&lt;/strong&gt; con un acento para pronunciar el inglés que cuando lo oyes piensas: &quot;A este seguro que le entienden&quot;. David dice que es gallego, pero Juanjo mencionaba mucho a Toledo, no se porqué. En su twitter dice que es COO en Teambox.&lt;br /&gt;
&quot;Si quieres vender necesitas un VP de Ventas&quot; y nos mostró una tabla de sueldos mareantes, todos con seis cifras. Comentó que en USA dan dinero por un 5% y te dejan trabajar y que en España siempre quieren influenciar en el negocio. Y expresó con impotencia que es muy difícil montar allí un equipo tecnológico estable, hay tanta oferta que se van a los dos días, lo que es un problema para conseguir ritmo.&lt;br /&gt;
Fue una charla muy técnica, llena de siglas que no recuerdo y&lt;strong&gt; me enteré de muy poco, cosa que me hizo preguntarle: &quot;Como técnico que ayuda a Startups, ¿debería aprender más de inversión, en vez del siguiente framework?&quot;.&lt;/strong&gt; Su respuesta fue que solamente si quieres, aunque alguien tiene que saber de todo esto en la empresa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ya oliendo el pulpo vino Molpe&lt;/strong&gt; (&lt;a href=&quot;https://twitter.com/molpe&quot; target=&quot;_blank&quot;&gt;Alberto Molpeceres&lt;/a&gt;), que se ha especializado en que tu negocio pueda cobrar online, con su charla que en la agenda venía como &quot;Lo que diga Molpe&quot; y que él renombró&lt;strong&gt; &quot;Family Business&quot;.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt; Nos dejó a todos destrozados.&lt;/strong&gt; &lt;strong&gt;Una reflexión muy profunda de lo que significa (¡y lo que cuesta!) conciliar de verdad.&lt;/strong&gt;&lt;br /&gt;
Cinco puntos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Distingue trabajo de hogar, que no te vean todo el día al ordenador.&lt;/li&gt;
&lt;li&gt;Agenda compartida, respeta los huecos comunes, no pongas la empresa como excusa.&lt;/li&gt;
&lt;li&gt;Las distancias importan.&lt;/li&gt;
&lt;li&gt;Todos o ninguno, intenta que los eventos sean un viaje familiar.&lt;/li&gt;
&lt;li&gt;Todo el mundo juega un rol. Involucra a todo el mundo en tu trabajo, en tus éxitos, en tus preocupaciones.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El turno de preguntas &lt;strong&gt;convirtió la sala en una terapia de padres y madres&lt;/strong&gt; expresando sus problemas en el día a día en un nuevo escenario para muchos.&lt;br /&gt;
No se si fue la mejor charla, pero sí la que más voy a recordar. Por lo inesperado del tema y lo bien tratado. Me llevo un montón de ideas para implementar en casa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;La comida tremenda.&lt;/strong&gt; La cantidad de pulpo, empanada, tortilla que me pude comer, sólo se queda pequeña comparada con la que desearía haber comido. Muy buen lugar, en un solar al lado del Campus, y muy buen ambiente para seguir saludando a los que todavía no habíamos podido.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/29727990461_4f2a70fa63_z_d.jpg&quot; alt=&quot;Zona de la comida&quot; width=&quot;640&quot; height=&quot;427&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;Después de comer &lt;strong&gt;&lt;a href=&quot;https://twitter.com/cuquiesp&quot; target=&quot;_blank&quot;&gt;Inés Luna&lt;/a&gt;, experta en atención al cliente&lt;/strong&gt; con la charla &quot;Usuarios, clientes y animales ¿Son todos iguales?&quot;&lt;br /&gt;
Se centró en lo importante que es tener un buen equipo de soporte, que además esté muy en contacto con producto, tanto para saber cuándo salen las siguientes funcionalidades, cuando se resolverán ciertos errores o para dar ideas.&lt;/p&gt;
&lt;p&gt;A continuación &lt;strong&gt;&lt;a href=&quot;https://twitter.com/diegomarino&quot; target=&quot;_blank&quot;&gt;Diego Mariño&lt;/a&gt; con &quot;Así crearía Ducksboard en 2016&quot;. Diego fue fundador de &lt;a href=&quot;https://twitter.com/ducksboard&quot; target=&quot;_blank&quot;&gt;Ducksboard&lt;/a&gt;, que fue adquirida por &lt;a href=&quot;https://twitter.com/newrelic&quot; target=&quot;_blank&quot;&gt;New Relic&lt;/a&gt;,&lt;/strong&gt; de la que ahora es Principal Product Manager.&lt;br /&gt;
Diego charló con el público más que una presentación. Habló de sus experiencias en Ducksboard y en USA. &lt;strong&gt;Buen ambiente vespertino.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Y para terminar subió al escenario&lt;strong&gt; &lt;a href=&quot;https://twitter.com/jemonleon&quot; target=&quot;_blank&quot;&gt;Jesús Monleón&lt;/a&gt; &lt;/strong&gt;para hablar de &quot;Cómo montar un equipo comercial para salir a vender con el cuchillo entre los dientes&quot;. Jesús es inversor en &lt;a href=&quot;https://t.co/shejETNbes&quot; target=&quot;_blank&quot;&gt;SeedRocket&lt;/a&gt; y fundador de &lt;a href=&quot;https://t.co/DWBQz8N6iw&quot; target=&quot;_blank&quot;&gt;Offerum&lt;/a&gt; entre otras, &lt;strong&gt;siempre como responsable del equipo comercial.&lt;/strong&gt;&lt;br /&gt;
Jesús nos llevó a sus inicios en eMagister con unas historias desternillantes sobre cómo se consigue vender algo.&lt;strong&gt; Entre mucho humor negro nos contó con detalle las interioridades de un equipo comercial.&lt;/strong&gt;&lt;br /&gt;
Una charla muy personal y a veces dura que puso buen broche a las ponencias del día.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/KlNvlsEWO8sOYNw0jwPYwLW_BVz--cNyM-noPFiEZ6MhQSXL4jcONRrUSR-yojhqKJkXpBlBa2BFt6om7VQpj8xZ8ECiEVLgM8XV4JVQQQnrMnwzhLvxukIJUKPcDcKlSeYaw3fgkO7bQOVK4W5OqYzJVWnaFKUpdBFK_hX00XZI2XAYUQB0j73ElJAkNnOtS-gz2OVq6XJ2_ysADy_7pZv-zJbDhE_Yl8-fUkBxeMTcE3bTBFKqyghc96HbSVbbWaECwn5A9UsWMxUrdTiFRftGwG5-cAdLuGYI7MArxmCoJyaBoGDrqyuSs5KpJNpcwY0ytrn_b82Me6lK_74cCB4fs94-oMUX3MD25S9e7sqUz573JwPpVBQG4Z28evzUiQx8B-iHs808p589zCAr4YbQCXZ8b5zvC3L__usbDJfEiD8Jh95KuCE1b6SwQYk8uem9LA8DaCvFNeJuVX9I9hLB5qGugT0EbyaNeUof5771GXjLQr9QvdcxAcEZN_OdY_NmmDIlODcnrI2xb7WeSN8EFKumNheCOiAV1LTpi9bun2yZUUm5pRecpLbTcX7LVHLhEecFysFvH1wz_baAt0yx9uywQA6QLa-HI1G_ompwyTlHjg=s902-no&quot; alt=&quot;Ponentes de la tarde&quot; width=&quot;551&quot; height=&quot;551&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;Y después del zumo terminamos con la &lt;strong&gt;Mesa Redonda de Medios Digitales&lt;/strong&gt;: &quot;la vida más allá de la publicidad y el CPM&quot;&lt;br /&gt;
Conversación claramente para iniciados en el mundo del contenido y lo que significa ganar dinero con gente que viene a verte sin tener que cobrarles. En general estaban bastante alineados.&lt;/p&gt;
&lt;h3&gt;Despedida&lt;/h3&gt;
&lt;p&gt;¡Y va terminando el evento!&lt;br /&gt;
Bonilla se sube a la palestra y nos cuenta los datos internos económicos de la Tarugoconf. El resultado sale positivo, pero nos aclara que es porque no ha tenido que pagar por varias cosas: como la sala (gracias a Campus Madrid), la web del evento (gracias a Space Nomads) y algo tan increíble como &lt;strong&gt;los vuelos de Juanjo Mata y Diego Mariño desde EEUU, ¡que se los pagaron ellos mismos!&lt;/strong&gt; Así que si contase con todos esos gastos el evento perdería mucho dinero.&lt;/p&gt;
&lt;p&gt;A continuación da las gracias especialmente a &lt;a href=&quot;https://twitter.com/candelamd&quot;&gt;Candela&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ydarias&quot;&gt;Yerai&lt;/a&gt; y &lt;a href=&quot;&amp;quot;https://twitter.com/jerolba&quot;&gt;Jero&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/bM0meM_Zyio22cEmD-IKISt3S4iicAcx_rEQ_QczpzkdtDV3WAo6zf7P1HT3ZAEmgnU9Y3_bqY7E03fzkdsacLEf1PWKps1kmy__ZsL_6EYA7gHV_tzyNLBNRQ5N9jn-1LrveW3uZpfjiGec4q-ephCVnr-5otVMCyEfhGMzT-Dh7DqHmUHImfqpc466W-FZfEDGldbZZtbPO8bWuoPjGWXyPyjov3ny8yvHGCElWd1XAji1qgN9Y-FUcjufFBB-VMBEJ6QmSB8e5EJXvCNprjcMIU4TFJBdZfBQwsZthj7SoF5tbgFE8zPQnfjeXFiWEXtpKtoDLhdTUcm7C1KZ4NOfDng6UHjtLE9wfkF0MN_u6G2SkVBhVIS2hm_KPxpTbP5lQ-Re9cEanWah55PwOYY8ga9C_g25OqLLQ7gxKAvKh6IelGSIbyjKyAbF9vQ-LLNekIGnkCYPWV88NmhofxhhYlbXmxmtzzMUh74VdsdozLZDO8yzv4HTKaUcDa7h25YxkhQ3RVp7dPrp8vrfglVIe4mkssx3zNWRCNhBJ_4YLY5mVTLca9wsfNF6JNa4C6PGqo2ux-MYPak6xjUCZavfTeJOPtZtoHnaupCqooA4ppYNcQ=w1251-h938-no&quot; alt=&quot;David dando las gracias al final&quot; width=&quot;601&quot; height=&quot;451&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;Nos comparte la certeza de que los eventos &quot;de autor&quot; son el futuro: Línea editorial, Experiencia, Networking y conseguir Leads valiosos, por encima de un CFP genérico y hacer branding personal.&lt;/p&gt;
&lt;p&gt;Sobre si habrá Tarugoconf 2017, dice ahora mismo no le apetece,  pero que sabe que alguien pronunciará las tres palabras mágicas... así que se despidió &lt;strong&gt;&quot;¡Hasta el año que viene!&quot;.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Bola extra&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/oyabun&quot; target=&quot;_blank&quot;&gt;Javier Alonso (@oyabun)&lt;/a&gt; hizo un trabajo magistral, haciendo el 'Graphic Recording' de todo el evento. Impresionó a todo el mundo. ¡Gracias y Enhorabuena!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/oyabun/status/776842954606542849&quot;&gt;&lt;img class=&quot;wp-image-3013 alignnone&quot; src=&quot;/assets/graphicrecording.png&quot; alt=&quot;graphicrecording&quot; width=&quot;610&quot; height=&quot;406&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;Me acaba de llegar un correo en el que David nos pide feedback, lo dejo por aquí también:&lt;/p&gt;
&lt;p&gt;Para repetir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tiempo para preguntas. 30 minutos de charla y 15 de preguntas.&lt;/li&gt;
&lt;li&gt;El buen ambiente entre los asistentes, cada charla fantástica.&lt;/li&gt;
&lt;li&gt;La tortilla caliente y poco cuajada.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para mejorar en la siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un pequeño break entre charlas. Cinco minutos para despejar la mente.&lt;/li&gt;
&lt;li&gt;La promesa de salir del evento con 10 contactos hiper-curated creo que no se cumplió. Seguro que no lo di todo conociendo gente, pero creo que si uno de los objetivos era ese habría que intentar alguna idea más para el año que viene.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;En resumen&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Muy potente, mucha energía, un ambiente espectacular&lt;/strong&gt; donde podías encontrar a un montón de compañeros y a los que no conocías sabías que iban a ser igual de interesantes; un conjunto de ponentes muy cuidado, con una presentación robusta  y &lt;strong&gt;con mensajes e ideas claras.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Una gran oportunidad para poder aprender de gente que se ha pegado muy duro y con ideas para llevar para aplicar desde ya.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/adelatorrefoss/status/777189741913669632&quot;&gt;&lt;img class=&quot;wp-image-3011 alignnone&quot; src=&quot;/assets/llegada.png&quot; alt=&quot;llegada&quot; width=&quot;552&quot; height=&quot;487&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Fotos&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://goo.gl/photos/A31X4868VKaCPQ8o9&quot;&gt;Live Sketching de Javier (@oyabun)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://goo.gl/photos/Z1e53MuCXuv3cshT6&quot;&gt;Mis notas #sketchnoting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bit.ly/tarugopics16&quot;&gt;Fotos oficiales de la Tarugoconf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://goo.gl/photos/KmgmH1qtYUBaBNmP9&quot;&gt;Mis fotos&lt;/a&gt;&lt;/p&gt;</content><author><name>Antonio de la Torre</name></author><category term="events" /><category term="tarugoconf" /><summary type="html">¿Qué es la Tarugoconf?
El viernes pasado, 16 de septiembre de 2016, asistí como orgulloso representante de Codesai, al mejor evento posible que cupiese en la imaginación de David Bonilla: la Tarugoconf. Un evento que nunca hubiese existido si no le hubiesen dicho las tres palabras mágicas &quot;No hay huevos&quot; y que se construye bajo las siguientes premisas: Utilidad, Practicidad, Diversión y Calité.
Citando la web:
¿Qué carallo es esto?
Sólo 100 entradas a la venta. 1 sólo día, 1 sólo track y 1 sólo objetivo: crear el evento sobre construcción y comercialización de Productos Digitales más awesómico y gallego del mundo. Lleno de ponentes con muchos tiros pegaos en las barricadas del mundillo tecnológico y que, en sus charlas, intentarán responder una simple pregunta:
¿Qué cambiaría si pudiera volver 2 años atrás?
El previo


Cuando presentó el evento por primera vez e informó que las entradas iban a ser por invitación, sabía que no iba a sentar bien y así fue. Escuché muchos comentarios y ninguno bueno; al que no le parecía innecesariamente exclusivo (como sinónimo de excluyente), le parecía que iba a ser carne delicatessen para trolls. Como reflexión David ya comentó, que para siguientes sólo una parte sería bajo invitación y el resto abierto a todo el mundo que quisiera venir.
A mi me parece un sistema tan bueno como cualquiera. Se quedó gente fuera, que hubiese pasado igual y en esta conferencia el tamaño sí importaba.
Ah! ¡Y el evento era dos días! Organizaron para el sábado una día de 'networking family friendly' realmente prometedor. No lo disfruté, será para la próxima.
El evento


Y llegó el gran día. Registro y café con bollos con un ambiente algo festivo. Había gente de todo el ecosistema: desarrollo, coaching, empresa, StartUps, ... caras conocidas y no tanto que invitaban a saludarse. Había conexión.
Inaugura David con una minikeynote de 15 minutos en las que nos presenta la agenda, cosas prácticas como dónde estará la pulpeira, cómo ir a la fiesta por la noche y lo más importante, la motivación de la conferencia y por qué estamos aquí hoy. Fue un momento con un montón de energía que nos ponía en situación de lo que iba a venir.
Para hacer el resumen siguiente me voy a fijar en mis notas hechas con dibujitos. También podéis ver el trabajo de Javier (@oyabun) haciendo el Live recording del evento.
Comienza Javi Santana, CTO de Carto con &quot;Crear software para empresacas que manejan pasta de verdad&quot;.
La idea principal que transmite es que si quieres &quot;gallina&quot; hay que ir a por la empresa, a instalar &quot;on premise&quot;. El cloud, la solución SAAS tiene un rendimiento muy bajo. Luego tienes que montar un super-equipo: Soluciones (Ninjas), Sales, Soporte (aka psicólogos). Refuerza algo que ya sabemos, que no hay que parar de investigar, si paras te mueres. Y termina con un mensaje, que el dinero mola, pero divertirse más.
Me gustó mucho, divertida, bien estructurada y conceptos claros.


A continuación le toca a Jorge Galindo, Product Manager de 47 Degrees, una empresa que hace software para todo el mundo desde sus oficinas al lado de la Peña Camarón, en Puerto de Santa María, Cádiz, con un par. Su charla se tituló &quot;Emprender en provincias&quot;.
Nos contó la historia de cómo llego 47 Degrees (latitud de Seattle) a Cádiz. Como pasó la empresa por lo estados de &quot;mundo de piruleta&quot;, &quot;hecatombe mundial&quot; y a quedarse sin pasta. Desde Cádiz se tuvo que reinventar empezando en corto, consiguió llegar a empresas de Madrid tirando de networking y les fue muy bien (por aquí pasó muy rápido, me hubiese gustado saber un poco más de este éxito). Pero entraron en un bucle de mucho curro y poca pasta que les obligó a fijar un punto de no retorno en el tiempo en el que buscarían otra cosa.
Estando Raúl Raja de vacaciones en Cartagena, leyó un artículo sobre Scala, llamó inmediatamente a Jorge para decirle que tenían que cambiar a Scala ya. Y él le respondió: &quot;¡Del tirón!... ¿Cómo dices que se escribe?&quot;. Aparte de la broma encontraron un nicho en la programación funcional que a base de investigar, mucho open source y atraer talento, les salvó el c... ¡Hicieron hasta un framework!
¿Qué cambiaría Jorge? Detalles, porque estás donde estás gracias a todas las experiencias. La pregunta que te tienes que hacer es si te gusta lo que eres y lo que estás haciendo.
Alguna idea: Todos los viernes mandan un correo a todo el mundo con información de en qué proyectos están y a menudo organizan actividades para todo el mundo.
Les preocupa crecer por encima de 30, por si se pierde la &quot;magia&quot; (palabras literales), tema que me suena bastante.
Charla muy potente, con buen ritmo. Quizás en la historia hay algún hueco que creo que se podría profundizar porque daría claves de cómo emprender desde fuera de Madrid, algo muy interesante para Codesai, sin duda.
Antes del café una minicharla de IBM, en la que muestra la arquitectura de Cloud e IoT que hay detrás de mover un BB-8. Un toque geek molón rápido y a la yugular.


Después del café empieza Jimena Catalina, con la charla &quot;Sácale provecho a tu diseñador&quot; (aunque en el programa era &quot;La culpa SIEMPRE es del diseñador&quot;). Jimena es Diseñadora visual freelance y tiene proyectos propios como Recetas de Rechupete. Me gustó escuchar a alguien más pegado al proceso de desarrollo que veo día a día.
Nos explica que es fundamental que el diseñador entienda el proceso de negocio. Hay que trabajar muy cerca del equipo, porque no sólo es diseñarlo, es colaborar en lo que luego hacen con él.
Destaca la importancia de un buen feedback, e intentar hablar del concreto, o qué se quiere conseguir, no de emociones.
 La mejor frase: &quot;Diseño NO es arte, no expresamos nuestras emociones. Somos artesanos al servicio, resolvemos necesidades&quot;
El toque de inversor potente vino a cargo de Juanjo Mata. Español en los USA desde hace 25 años con un acento para pronunciar el inglés que cuando lo oyes piensas: &quot;A este seguro que le entienden&quot;. David dice que es gallego, pero Juanjo mencionaba mucho a Toledo, no se porqué. En su twitter dice que es COO en Teambox.
&quot;Si quieres vender necesitas un VP de Ventas&quot; y nos mostró una tabla de sueldos mareantes, todos con seis cifras. Comentó que en USA dan dinero por un 5% y te dejan trabajar y que en España siempre quieren influenciar en el negocio. Y expresó con impotencia que es muy difícil montar allí un equipo tecnológico estable, hay tanta oferta que se van a los dos días, lo que es un problema para conseguir ritmo.
Fue una charla muy técnica, llena de siglas que no recuerdo y me enteré de muy poco, cosa que me hizo preguntarle: &quot;Como técnico que ayuda a Startups, ¿debería aprender más de inversión, en vez del siguiente framework?&quot;. Su respuesta fue que solamente si quieres, aunque alguien tiene que saber de todo esto en la empresa.
Ya oliendo el pulpo vino Molpe (Alberto Molpeceres), que se ha especializado en que tu negocio pueda cobrar online, con su charla que en la agenda venía como &quot;Lo que diga Molpe&quot; y que él renombró &quot;Family Business&quot;.
 Nos dejó a todos destrozados. Una reflexión muy profunda de lo que significa (¡y lo que cuesta!) conciliar de verdad.
Cinco puntos:

Distingue trabajo de hogar, que no te vean todo el día al ordenador.
Agenda compartida, respeta los huecos comunes, no pongas la empresa como excusa.
Las distancias importan.
Todos o ninguno, intenta que los eventos sean un viaje familiar.
Todo el mundo juega un rol. Involucra a todo el mundo en tu trabajo, en tus éxitos, en tus preocupaciones.

El turno de preguntas convirtió la sala en una terapia de padres y madres expresando sus problemas en el día a día en un nuevo escenario para muchos.
No se si fue la mejor charla, pero sí la que más voy a recordar. Por lo inesperado del tema y lo bien tratado. Me llevo un montón de ideas para implementar en casa.
La comida tremenda. La cantidad de pulpo, empanada, tortilla que me pude comer, sólo se queda pequeña comparada con la que desearía haber comido. Muy buen lugar, en un solar al lado del Campus, y muy buen ambiente para seguir saludando a los que todavía no habíamos podido.


Después de comer Inés Luna, experta en atención al cliente con la charla &quot;Usuarios, clientes y animales ¿Son todos iguales?&quot;
Se centró en lo importante que es tener un buen equipo de soporte, que además esté muy en contacto con producto, tanto para saber cuándo salen las siguientes funcionalidades, cuando se resolverán ciertos errores o para dar ideas.
A continuación Diego Mariño con &quot;Así crearía Ducksboard en 2016&quot;. Diego fue fundador de Ducksboard, que fue adquirida por New Relic, de la que ahora es Principal Product Manager.
Diego charló con el público más que una presentación. Habló de sus experiencias en Ducksboard y en USA. Buen ambiente vespertino.
Y para terminar subió al escenario Jesús Monleón para hablar de &quot;Cómo montar un equipo comercial para salir a vender con el cuchillo entre los dientes&quot;. Jesús es inversor en SeedRocket y fundador de Offerum entre otras, siempre como responsable del equipo comercial.
Jesús nos llevó a sus inicios en eMagister con unas historias desternillantes sobre cómo se consigue vender algo. Entre mucho humor negro nos contó con detalle las interioridades de un equipo comercial.
Una charla muy personal y a veces dura que puso buen broche a las ponencias del día.


Y después del zumo terminamos con la Mesa Redonda de Medios Digitales: &quot;la vida más allá de la publicidad y el CPM&quot;
Conversación claramente para iniciados en el mundo del contenido y lo que significa ganar dinero con gente que viene a verte sin tener que cobrarles. En general estaban bastante alineados.
Despedida
¡Y va terminando el evento!
Bonilla se sube a la palestra y nos cuenta los datos internos económicos de la Tarugoconf. El resultado sale positivo, pero nos aclara que es porque no ha tenido que pagar por varias cosas: como la sala (gracias a Campus Madrid), la web del evento (gracias a Space Nomads) y algo tan increíble como los vuelos de Juanjo Mata y Diego Mariño desde EEUU, ¡que se los pagaron ellos mismos! Así que si contase con todos esos gastos el evento perdería mucho dinero.
A continuación da las gracias especialmente a Candela, Yerai y Jero.


Nos comparte la certeza de que los eventos &quot;de autor&quot; son el futuro: Línea editorial, Experiencia, Networking y conseguir Leads valiosos, por encima de un CFP genérico y hacer branding personal.
Sobre si habrá Tarugoconf 2017, dice ahora mismo no le apetece,  pero que sabe que alguien pronunciará las tres palabras mágicas... así que se despidió &quot;¡Hasta el año que viene!&quot;.
Bola extra
Javier Alonso (@oyabun) hizo un trabajo magistral, haciendo el 'Graphic Recording' de todo el evento. Impresionó a todo el mundo. ¡Gracias y Enhorabuena!


Feedback
Me acaba de llegar un correo en el que David nos pide feedback, lo dejo por aquí también:
Para repetir:

Tiempo para preguntas. 30 minutos de charla y 15 de preguntas.
El buen ambiente entre los asistentes, cada charla fantástica.
La tortilla caliente y poco cuajada.

Para mejorar en la siguiente:

Un pequeño break entre charlas. Cinco minutos para despejar la mente.
La promesa de salir del evento con 10 contactos hiper-curated creo que no se cumplió. Seguro que no lo di todo conociendo gente, pero creo que si uno de los objetivos era ese habría que intentar alguna idea más para el año que viene.

En resumen
Muy potente, mucha energía, un ambiente espectacular donde podías encontrar a un montón de compañeros y a los que no conocías sabías que iban a ser igual de interesantes; un conjunto de ponentes muy cuidado, con una presentación robusta  y con mensajes e ideas claras.
Una gran oportunidad para poder aprender de gente que se ha pegado muy duro y con ideas para llevar para aplicar desde ya.


Fotos
Live Sketching de Javier (@oyabun)
Mis notas #sketchnoting
Fotos oficiales de la Tarugoconf
Mis fotos</summary></entry><entry><title type="html">Recorriendo poco a poco el libro “Understanding the 4 rules of simple design”</title><link href="https://codesai.aerobatic.io/2016/09/recorriendo-poco-a-poco-el-libro-understanding-the-4-rules-of-simple-design" rel="alternate" type="text/html" title="Recorriendo poco a poco el libro “Understanding the 4 rules of simple design”" /><published>2016-09-14T09:16:31+00:00</published><updated>2016-09-14T09:16:31+00:00</updated><id>https://codesai.aerobatic.io/2016/09/recorriendo-poco-a-poco-el-libro-understanding-the-4-rules-of-simple-design</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/09/recorriendo-poco-a-poco-el-libro-understanding-the-4-rules-of-simple-design">&lt;h1&gt;Kata del Juego de la Vida de Conway&lt;/h1&gt;
&lt;p&gt;En mis primeras semanas en &lt;a href=&quot;http://www.codesai.com&quot;&gt;Codesai &lt;/a&gt;he hecho la kata del &lt;a href=&quot;https://es.wikipedia.org/wiki/Juego_de_la_vida&quot;&gt;Juego de la Vida de Conway&lt;/a&gt; como parte de mi formación para empaparme de la cultura y valores de la empresa.&lt;/p&gt;
&lt;p&gt;La hice dos veces: la primera ha sido &lt;a href=&quot;https://github.com/adelatorrefoss/kata-tdd-game-of-life-inside-out-js&quot;&gt;TDD inside-out en Javascript&lt;/a&gt; con Karma, Mocha y Chai, y la segunda &lt;a href=&quot;https://github.com/adelatorrefoss/kata-game-of-life-groovy-outside-in&quot;&gt;TDD outside-in con Groovy&lt;/a&gt; y Spock. Dejo aquí mis enlaces al github donde se ve en cada commit qué decisiones he ido tomando siguiendo el ciclo: ROJO -&amp;gt; VERDE -&amp;gt; REFACTOR.&lt;/p&gt;
&lt;p&gt;Para ver una buena explicación de las diferencias de hacer TDD inside-out e outside-in, podéis leer este post: &lt;a href=&quot;https://www.adictosaltrabajo.com/tutoriales/tdd-outside-in-vs-inside-out/&quot;&gt;TDD: Outside-In vs Inside-Out&lt;/a&gt; en el fantástico &lt;a href=&quot;https://www.adictosaltrabajo.com/&quot;&gt;blog de Adictos al Trabajo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Después de hacer estas dos katas, he leído el libro &lt;a href=&quot;https://www.goodreads.com/book/show/21841698-understanding-the-four-rules-of-simple-design&quot;&gt;“Understanding the 4 rules of simple design”&lt;/a&gt; y he comparado mis decisiones.&lt;br /&gt;
Lo que viene a continuación no es un resumen, son comentarios de lo que más me ha llamado la atención, así que te recomiendo leer el libro antes de seguir. Es corto, en un día lo tienes hecho.&lt;/p&gt;
&lt;h1&gt;Resumen y comentarios del libro “Understanding the 4 rules of simple design”&lt;/h1&gt;
&lt;p&gt;El libro empieza muy fuerte, con los prólogos de Kent Beck y J. B. Rainsberger de los que se sacan auténticas perlas:&lt;/p&gt;
&lt;h2&gt;Foreword from Kent Beck&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;Is wrong “Design for the future. Change is expensive. Make it cheap by anticipating it.”&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;This looked like a positive feedback loop to me: more speculation -&amp;gt; worse design -&amp;gt; more speculation.&lt;br /&gt;
The good news about disastrous positive feedback loops is that you can generally drive them backwards&lt;b&gt;&lt;i&gt;. I first experimented by ignoring any changes that seemed like they would happen longer than six month in the future. My designs were simpler, I started making progress sooner, and I stressed less about the unknowable future. I shortened the time horizon to three months. More better.&lt;br /&gt;
One month. More. A week. A day. Oh, hell, what happens if I don’t add any design elements&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Es muy gráfico cómo relata una especie de evolución de su pensamiento sobre qué pasaría si no adelantamos nada de supuestos futuros.&lt;/p&gt;
&lt;p&gt;Buceando un poco desde el enlace que da en el prólogo, llegué a un &lt;a href=&quot;http://martinfowler.com/bliki/BeckDesignRules.html&quot;&gt;artículo de Martin Fowler&lt;/a&gt; sobre estas reglas de diseño donde pone la siguiente cita de Kent Beck:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;At the time there was a lot of “design is subjective”, “design is a matter of taste” bullshit going around&lt;/i&gt;&lt;b&gt;&lt;i&gt;. &lt;/i&gt;&lt;/b&gt;&lt;i&gt;I disagreed. There are better and worse designs. &lt;/i&gt;&lt;b&gt;&lt;i&gt;These criteria &lt;/i&gt;&lt;/b&gt;&lt;i&gt;aren’t perfect, but they&lt;/i&gt;&lt;b&gt;&lt;i&gt; serve to sort out some of the obvious crap and (importantly) you can evaluate them right now. &lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;The real criteria &lt;/i&gt;&lt;/b&gt;&lt;i&gt;for quality of design, “minimizes cost (including the cost of delay) and maximizes benefit over the lifetime of the software,” can &lt;/i&gt;&lt;b&gt;&lt;i&gt;only be evaluated post hoc&lt;/i&gt;&lt;/b&gt;&lt;i&gt;, and even then any evaluation will be subject to a large bag full of cognitive biases.&lt;/i&gt;&lt;b&gt;&lt;i&gt; The four rules are generally predictive.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;-- Kent Beck&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Creo que define muy bien lo que significan las buenas prácticas: &lt;i&gt;Estos criterios no son perfectos, pero sirven para detectar algo de la basura más obvia y (lo más importante) puedes evaluarlo inmediatamente.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;En un entorno de trabajo donde cualquier decisión es cuestionable, tener reglas básicas para distinguir el &lt;/b&gt;&lt;b&gt;&lt;i&gt;‘crap-code’&lt;/i&gt;&lt;/b&gt;&lt;b&gt; ayuda mucho a las conversaciones dentro del equipo&lt;/b&gt;&lt;/p&gt;
&lt;h2&gt;Foreword from J. B. Reinsberger&lt;/h2&gt;
&lt;p&gt;El siguiente prólogo está realmente bien. Pues ayuda a profundizar y hacerte una idea de las conversaciones que puede haber detrás de algo aparentemente tan sencillo como las cuatro reglas.&lt;/p&gt;
&lt;p&gt;Destaco como antes, no textos del prólogo, sino de los posts relacionados de JB. Son mencionados en numerosas ocasiones por todos los autores vistos hasta ahora y se recomiendan incluso por Corey Haines en el propio libro.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://blog.jbrains.ca/permalink/the-four-elements-of-simple-design&quot;&gt;&lt;i&gt;The four elements of simple design&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;When I find fifteen lines of duplicate code, I start by extracting them to a new method, and &lt;/i&gt;&lt;b&gt;&lt;i&gt;since I probably don’t yet know what those lines of code do yet, I name the new method foo()&lt;/i&gt;&lt;/b&gt;&lt;i&gt;. After around 15 minutes of working in the same area, I begin to understand what this method does, so I give it an accurate name, such as computeCost().&lt;br /&gt;
[...]&lt;br /&gt;
&lt;/i&gt;&lt;b&gt;&lt;i&gt;That leaves me with two key elements of simple design: remove duplication and fix bad names&lt;/i&gt;&lt;/b&gt;&lt;i&gt;. When I remove duplication, I tend to see an appropriate structure emerge, and when I fix bad names, I tend to see responsibilities slide into appropriate parts of the design.&lt;br /&gt;
[...]&lt;br /&gt;
I claim that developing strong skills of detecting duplication, removing duplication, identifying naming problems, and fixing naming problems &lt;/i&gt;&lt;b&gt;&lt;i&gt;equates to learning everything ever written about object-oriented design.&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Este post es &lt;strong&gt;oro puro&lt;/strong&gt;, el primer párrafo me encanta, pues dar nombres a métodos o clases, es la tarea más difícil del desarrollo. Aquí da una pista muy buena.&lt;/p&gt;
&lt;p&gt;El siguiente post relacionado de JB, es la continuación del anterior, e intenta cerrar la ‘guerra’ abierta sobre el orden de importancia de las cuatro reglas.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://blog.thecodewhisperer.com/permalink/putting-an-age-old-battle-to-rest/&quot;&gt;&lt;i&gt;Putting an age old battle to rest&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;I don’t think it matters whether you focus first on removing duplication or on revealing intent/increasing clarity, because these two guidelines very quickly form a rapid, tight feedback cycle.&lt;/i&gt;&lt;/b&gt;&lt;i&gt; By the time the guidelines guide you to any useful results, you’ll have probably used them both. Therefore, order the rules however you like, because you’ll get to the same place either way.&lt;br /&gt;
...&lt;br /&gt;
When we remove duplication, we create buckets; when we improve names, we create &lt;/i&gt;&lt;b&gt;&lt;i&gt;more cohesive&lt;/i&gt;&lt;/b&gt;&lt;i&gt;, more easily-abstracted buckets.&lt;br /&gt;
...&lt;br /&gt;
Now, I think of them as a &lt;/i&gt;&lt;b&gt;&lt;i&gt;single guideline: remove duplication and improve names in small cycles.&lt;/i&gt;&lt;/b&gt;&lt;i&gt; When I do this, I produce a higher proportion of  well-factored code compared to all the code I write.&lt;br /&gt;
...&lt;br /&gt;
Removing duplication and improving names helps me reduce the liability (cost) of the code that I write. &lt;/i&gt;&lt;b&gt;&lt;i&gt;Together, they help me reduce both the total cost&lt;/i&gt;&lt;/b&gt;&lt;i&gt; and the volatility of the cost of the features I deliver.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;En estos tres párrafos habla de tres temas muy potentes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cerrar la guerra sobre el orden&lt;/li&gt;
&lt;li&gt;Cohesión&lt;/li&gt;
&lt;li&gt;Coste&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Introduction: This book&lt;/h2&gt;
&lt;p&gt;Me encanta esta introducción. Habla con más claridad de lo que hemos visto hasta ahora: cómo las cuatro reglas se retroalimentan, incidiendo en lo comentado por JB.&lt;/p&gt;
&lt;p&gt;Recalca como Kent Beck que no ve que haya diseños buenos y malos, e incluso que puede haber varios buenos diseños. A partir de ahí, comparándolos se podría llegar a un consenso de las ideas fundamentales de por qué un diseño es &quot;mejor&quot; que otro.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;If we can look at things from a comparison point of view, perhaps we can find some fundamental ideas about “better”.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Termina formulando las dos constantes en el desarrollo de software, acompañado de un tweet de &lt;a href=&quot;https://twitter.com/sandimetz&quot;&gt;Sandi Metz&lt;/a&gt;: &lt;b&gt;“Habrá cambios pero no sabemos qué es lo que va a cambiar”&lt;/b&gt;&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;A continuación entramos en materia del libro con diferentes ejemplos divididos en capítulos (respeto los títulos en inglés), como si fuéramos construyendo desde cero el Juego de la Vida.&lt;/p&gt;
&lt;h3&gt;Test Names Should Influence Object’s API&lt;/h3&gt;
&lt;pre&gt;// Test: Check world is empty
// NO
world.cell_alive_at(1,1)?
// YES
world.empty?&lt;/pre&gt;
&lt;p&gt;Hay que usar nombres de test de hablen de negocio, y construir un API apropiada. Si usamos nombres de test orientados a datos, corremos el riesgo de construir un código que expone información que no es responsabilidad de la clase. &lt;/p&gt;
&lt;h3&gt;Duplication of Knowledge about Topology&lt;/h3&gt;
&lt;pre&gt;class LivingCell
    attr_reader :location
end class
&lt;/pre&gt;
&lt;p&gt;Aquí, Corey Hanes propone poner la localización dentro de la celdas, para no duplicar el conocimiento acerca de la topología del sistema, como en el código visto antes. &lt;/p&gt;
&lt;p&gt;Pensé en hacer esto, pero tal como estaba resolviendo el problema, no podía mover o quitar el conocimiento de la ubicación de las células fuera de la clase Grid, que está un nivel hacia afuera: lo necesitaba para recorrer la malla y calcular la siguiente iteración y para calcular el número de vecinos.&lt;/p&gt;
&lt;p&gt;Como experimento para esta kata, la estructura de datos en la que almacené las células de la malla, una estructura de dos dimensiones, fue en un tipo List, unidimensional. Y para consumirlo, desarrollé una especie de Iterable y el acceso a un elemento concreto con paginación.&lt;/p&gt;
&lt;p&gt;Así, el primero de los problemas que comento lo tenía resuelto, no se iba a recorrer la malla.&lt;/p&gt;
&lt;p&gt;El segundo problema, el de calcular el número de vecinos es el que no supe cómo resolverlo. ¿Cómo podía acceder a los vecinos de un elemento, si la posición que ocupan la tiene solo los elementos? ¿Cómo accedo a un elemento concreto de la malla?&lt;/p&gt;
&lt;p&gt;Después de terminar la kata, se me ocurrió una solución a esto. Podría haber usado métodos como .filter() sobre el List, para buscar elementos. No es muy eficiente, pero consigue lo que se quiere, abstraes la localización del Grid y se lo pasas a las células, lo probaré para la próxima.&lt;/p&gt;
&lt;h3&gt;Behavior Attractors&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;&lt;i&gt;Whenever we have a new method — a new behavior — an important question is “where do we put it?” What type does this belong to?&lt;/i&gt;&lt;/b&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Siempre que tenemos un nuevo comportamiento la pregunta es dónde lo ponemos.&lt;br /&gt;
En el libro recomienda no pararse demasiado a analizar dónde ubicarlo. Buscar rápidamente un sitio. Si nos encaja, perfecto; pero si no, tenemos que moverlo. Además cuanto antes para que luego con el uso no sea más difícil.&lt;/p&gt;
&lt;pre&gt;// Where do we put neighbors?
// Location seems perfect.
class Location
     attr_reader :x, :y
     &lt;strong&gt;def neighbors&lt;/strong&gt;
         # calculate a list of locations
         # that are considered neighbors
      end
 end&lt;/pre&gt;
&lt;p&gt;Destaca que a través del proceso de eliminar la duplicación de conocimiento de manera agresiva es como conseguimos clases que atraigan comportamientos. Y como corolario, si intentamos eliminar esa duplicidad y no encontramos dónde colocarlo es que nos falta alguna abstracción.&lt;/p&gt;
&lt;p&gt;En el ejemplo de código, me llamó mucho la atención poner los neighbors en Location. Porque eso significa que es un dato que se guarda, no un dato calculado al momento del tick. Interesante para explorar.&lt;/p&gt;
&lt;h3&gt;Testing State vs Testing Behavior&lt;/h3&gt;
&lt;p&gt;En este apartado habla que hay que testear el comportamiento y no el estado, y pone como ejemplo que lo primero que comprueba en la kata es:&lt;/p&gt;
&lt;pre&gt;world.empty?&lt;/pre&gt;
&lt;p&gt;Yo lo que pensé que era el primer comportamiento era algo como:&lt;/p&gt;
&lt;pre&gt;world.stable?&lt;/pre&gt;
&lt;p&gt;Es decir: &quot;¿Es el sistema estable? ¿Hay que hacer una siguiente iteración? ¿Cuál es la condición de parada?&quot;. Comentándolo con los compañeros, parece que afronté el problema desde demasiado afuera. Outside-in no quiere decir literalmente: &quot;Desde la capa más exterior, hacia dentro&quot;.&lt;/p&gt;
&lt;h3&gt;Don’t Have Tests Depend on Previous Tests&lt;/h3&gt;
&lt;pre&gt;def test_an_empty_world_stays_empty_after_a_tick
     world = World.new
     next_world = world.tick
     assert_true next_world.empty?
 end&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;Rather new world is empty, let’s explicitly ask for an empty world.&lt;/i&gt;&lt;/p&gt;
&lt;pre&gt;def test_an_empty_world_stays_empty_after_a_tick
     world = World.empty
     next_world = world.tick
     assert_true next_world.empty?
 end&lt;/pre&gt;
&lt;p&gt;Si cambiamos el constructor base y devuelve otra cosa que un mundo vacío, el primer test continuará pasando. Para evitar esto, quien invoque al objeto no debería usar el constructor base con la confianza que vendrá con un estado específico, y menos en la preparación del test, debería usar un 'constructor', un 'builder', para crear un objeto con un estado concreto y válido.&lt;/p&gt;
&lt;p&gt;Esto me parece simplemente genial. Dejar de confiar en los constructores y crear builders que te den el objeto en el estado deseado. Es un problema que me encuentro de manera recurrente, no confío en los datos que tengo al preparar un test.&lt;/p&gt;
&lt;h3&gt;Breaking Abstraction Level&lt;/h3&gt;
&lt;pre&gt;def test_world_is_not_empty_after_adding_a_cell
     world = World.empty
     world.set_living_at&lt;b&gt;(Location.new(1,1))&lt;/b&gt;
     assert_false &lt;b&gt;world.empty?&lt;/b&gt;
end
&lt;/pre&gt;
&lt;p&gt;Este tests está acoplado a una capa de abstracción que no es la suya, por lo que si se cambia el sistema de coordenadas a tres dimensiones, por ejemplo, fallarán tests que no tienen nada que ver.&lt;/p&gt;
&lt;p&gt;El libro recomienda en este caso hacer un doble de test que abstraiga de ese detalle. Otra opción puede ser usar un helper que de cree ese objeto de coordenadas y así solo está definido en un sitio.&lt;/p&gt;
&lt;pre&gt;def test_world_is_not_empty_after_adding_a_cell
    world = World.empty
    world.set_living_at(Object.new)
    assert_false world.empty?
end
&lt;/pre&gt;
&lt;p&gt;Este tipo de problemas nos hacen ver todos los puntos de contacto que tienen nuestros objetos con los demás.&lt;/p&gt;
&lt;h3&gt;Naive Duplication&lt;/h3&gt;
&lt;p&gt;Muy interesante esta sección en la que veremos las diferencias entre duplicidad de código y duplicidad de lógica de negocio.&lt;/p&gt;
&lt;p&gt;Vamos a observar las condiciones para que una célula viva en la siguiente generación:&lt;/p&gt;
&lt;pre&gt;class Cell
    # ...
    def alive_in_next_generation?
        if alive
            number_of_neighbors == 2 ||
            number_of_neighbors == 3
        else
            number_of_neighbors == 3
        end
    end
end
&lt;/pre&gt;
&lt;p&gt;Podríamos refactorizar este código:&lt;/p&gt;
&lt;pre&gt;// An optimization of is_alive condition
class Cell
    # ...
    def alive_in_next_generation?
        (alive &amp;amp;&amp;amp; number_of_neighbors == 2) ||
            number_of_neighbors == 3
    end
end
&lt;/pre&gt;
&lt;p&gt;Con este refactor de código recordamos una de las cuatro reglas: &quot;El conocimiento se debe representar una y solamente una vez&quot;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;Every piece of knowledge has one and only one representation.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Mirando otra vez al código original podemos ver que esos 3s no significan lo mismo.&lt;br /&gt;
Recomienda que una buena técnica para no caer en este error, sería nombrar de forma explícita los conceptos antes de refactorizar.&lt;/p&gt;
&lt;pre&gt;class Cell
    # ...
    def alive_in_next_generation?
        if alive
            stable_neighborhood?
        else
            genetically_fertile_neighborhood?
        end
    end
end&lt;/pre&gt;
&lt;p&gt;Así se ve mucho mejor y en caso de cambiar las condiciones de supervivencia, accedemos a reglas de negocio directamente.&lt;/p&gt;
&lt;p&gt;En mi código no hice refactor porque me di cuenta que no era el mismo conocimiento, pero no extraje a un método cada comportamiento, interesante apunte para la próxima.&lt;/p&gt;
&lt;h3&gt;Procedural Polymorphism&lt;/h3&gt;
&lt;p&gt;El if en el código del apartado anterior diferencia los casos comprobando el valor del estado:&lt;/p&gt;
&lt;pre&gt;if state == ALIVE
...
&lt;/pre&gt;
&lt;p&gt;En esta sección destaca que el uso de variables de estado es un indicio de que no se ha entendido el negocio. Interesante.&lt;/p&gt;
&lt;p&gt;¿Cómo resolvemos esto? Nos presenta el Polimorfismo, como una técnica que nos da la posibilidad de llamar a un único método y tener más de un posible comportamiento. Si usamos ifs para hacer estas diferencias le llama &lt;strong&gt;Procedural Polymorphism&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Cuando vi esto me vino a la cabeza que una buena razón para no tener cuerpos ifs muy grandes o complejos es que se podría romper el Principio Open/Close porque este método tiene más de una razón para cambiar. Deberían ser super-sencillos.&lt;/p&gt;
&lt;p&gt;Avanzando con el polimorfismo, la OO nos da su método preferido, el Polimorfismo basado en tipos.&lt;/p&gt;
&lt;p&gt;Así en nuestro ejemplo podemos coger el estado y trasladarlo a un par de tipos:&lt;/p&gt;
&lt;pre&gt;class LivingCell
    def alive_in_next_generation?
        # neighbor_count == 2 || neighbor_count == 3
        stable_neighborhood?
    end
end

class DeadCell
    def alive_in_next_generation?
        # neighbor_count == 3
        genetically_fertile_neighborhood?
    end
end
&lt;/pre&gt;
&lt;p&gt;¡Polimorfismo! ¡Me encanta! Me parece muy mágico y elegante.&lt;/p&gt;
&lt;p&gt;Pero Haines no lo deja ahí, no nos deja tranquilos en nuestra satisfacción. A continuación rompe el polimorfismo de este ejemplo cambiando de nombre a los métodos. ¿Por qué?&lt;/p&gt;
&lt;p&gt;La explicación que da, es que &lt;b&gt;el polimorfimo hace abstracciones muy atractivas que podrían ocultar detalles del comportamiento real&lt;/b&gt; de cada subtipo, siendo incorrecto ese genérico que queremos atribuirle.&lt;/p&gt;
&lt;p&gt;Para darnos un ejemplo, se plantea la propia existencia de la clase &lt;code&gt;DeadCell&lt;/code&gt;, pues no tendría mucho sentido si el tamaño del Grid fuera infinito.&lt;/p&gt;
&lt;p&gt;Es muy fácil, sobre todo al principio, sacar abstracciones rápidamente y hacer una jerarquía de tipos. Pero si nos damos cuenta que es incorrecta deshacerla suele ser complicado.&lt;/p&gt;
&lt;h3&gt;Making Assumptions About Usage&lt;/h3&gt;
&lt;p&gt;La idea fundamental bajo la pregunta: &quot;¿Necesitamos esta abstracción?&quot; es: &quot;El uso influencia la estructura&quot;. Propone que hay que construir nuestra lógica de negocio y las abstracciones que usemos motivadas por el uso que hagamos.&lt;/p&gt;
&lt;h3&gt;Unwrapping an Object&lt;/h3&gt;
&lt;p&gt;Partiendo de este trozo de código que muestra una solución para contar los vecinos de una célula:&lt;/p&gt;
&lt;pre&gt;class Location
    attr_reader :x, :y
end

location1 = Location.new(1, 1)
location2 = Location.new(1, 2)

if location1.equals?(location2)
    # Do something interesting
end
&lt;/pre&gt;
&lt;p&gt;Para hacer ese &quot;algo interesante&quot; tenemos que saber si las dos posiciones son iguales. Y generalmente haríamos algo como esto:&lt;/p&gt;
&lt;pre&gt;class Location
    attr_reader :x, :y
    def equals?(other_location)
        self.x == other_location.x &amp;amp;&amp;amp;
        self.y == other_location.y
    end
end

location1.equals?(location2)
&lt;/pre&gt;
&lt;p&gt;¿Qué sucedería si aplicamos en la kata la restricción (muy potente) de &quot;Nuestras funciones no pueden retornar valores&quot;?&lt;br /&gt;
Tendríamos que transformar este código para que cumpla el &lt;b&gt;'Tell, don’t ask'&lt;/b&gt; y confiar en los objetos para que hagan un trabajo que generalmente haríamos nosotros.&lt;/p&gt;
&lt;p&gt;Para ello propone una solución muy interesante, el uso de lambdas: le decimos al &lt;code&gt;.equals?&lt;/code&gt; lo que queremos que ejecute si se cumple la condición.&lt;/p&gt;
&lt;pre&gt;count_of_locations = 0
location1.equals?(location2, &lt;b&gt;-&amp;gt; { count_of_locations++ }&lt;/b&gt;)

class Location
    attr_reader :x, :y
    def equals?(other_location, &lt;b&gt;if_equal&lt;/b&gt;)
        other_location.equals_coordinate?(self.x, self.y, &lt;b&gt;if_equal&lt;/b&gt;)
        nil
    end

    def equals_coordinate?(other_x, other_y, &lt;b&gt;if_equal&lt;/b&gt;)
        if self.x == other_x &amp;amp;&amp;amp; self.y == other_y
            &lt;b&gt;if_equal.()&lt;/b&gt;
        end
            nil
    end
end
&lt;/pre&gt;
&lt;p&gt;Es de destacar que como no podemos retornar nada, hay que invocar a &lt;code&gt;other_location&lt;/code&gt; con la lambda, para que lo ejecute.&lt;/p&gt;
&lt;p&gt;Me ha encantado encontrarme el uso de funciones anónimas en este ejemplo; creo que combinándolo con el apartado anterior de &quot;Romper el nivel de abstracción&quot; puede quedar un código con menos efectos laterales.&lt;/p&gt;
&lt;h3&gt;Inverted Composition as a Replacement for Inheritance&lt;/h3&gt;
&lt;p&gt;Volvemos al ejemplo anterior del polimorfismo:&lt;/p&gt;
&lt;pre&gt;// Let’s create mother class
class Cell
&lt;b&gt;    attr_reader :location&lt;/b&gt;
end

class LivingCell &amp;lt; Cell
end

class DeadCell &amp;lt; Cell
end
&lt;/pre&gt;
&lt;p&gt;Esta extracción al crear el padre no introduce un nuevo concepto de dominio. La herencia es a menudo utilizada como una forma de &quot;reusar&quot; más que para eliminar duplicidades.&lt;br /&gt;
Es un error común crear clases 'base' de este estilo, que pueden llegar a ser un contenedor de comportamientos muy poco relacionados.&lt;/p&gt;
&lt;p&gt;Si la herencia no es un solución, ¿qué otras opciones tenemos?&lt;/p&gt;
&lt;p&gt;En el ejemplo usa módulos de Ruby, y en otros lenguajes tendríamos Traits (Groovy) y en otros algo como los decoradores.&lt;/p&gt;
&lt;pre&gt;class LivingCell
    include HasLocation
end

class DeadCell
    include HasLocation
end
&lt;/pre&gt;
&lt;p&gt;Llegados a este punto, con la duplicidad medio resuelta, vemos que tenemos dos clases apuntando al mismo tipo, &lt;code&gt;(Living|Dead)Cell&lt;/code&gt; a &lt;code&gt;Location&lt;/code&gt;.&lt;br /&gt;
Una técnica útil es &lt;strong&gt;Invertir la dependencia&lt;/strong&gt;, que la localización apunte a las células.&lt;/p&gt;
&lt;pre&gt;class Location
    attr_reader :x, :y
&lt;b&gt;    attr_reader :cell&lt;/b&gt;
end 

class LivingCell
    def stays_alive?(number_of_neighbors)
        number_of_neighbors == 2 ||
        number_of_neighbors == 3
    end 
end 

class DeadCell
    def comes_to_life?(number_of_neighbors)
        number_of_neighbors == 3
    end
end
&lt;/pre&gt;
&lt;p&gt;De esta manera, las clases que representan células están únicamente centradas en la información que les atañe, como las reglas sobre cómo evolucionan.&lt;br /&gt;
También hemos extraído la topología de las reglas del juego, viendo que el tipo &lt;code&gt;Location&lt;/code&gt; tiene un rol de estructura, que une la malla con la célula.&lt;/p&gt;
&lt;p&gt;Comparándo con mi código, la composición invertida es muy similar a la solución que había propuesto yo inicialmente en la kata: &lt;code&gt;Grid -&amp;gt; Position -&amp;gt; Info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Como 'Rule of Thumb' la dependencia de clases debe ir desde la que más cambia a la que menos cambia, desde la menos estable a la más estable, es decir, la dependencia la tiene que tener aquella que tiene más posibilidades de cambiar sus atributos.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Programar el Juego de la Vida de dos maneras diferentes y luego leerme este libro ha resultado ser un ejercicio muy intenso y productivo. ¡Y escribir este post, claro!&lt;br /&gt;
Me llevo un buen montón de herramientas.&lt;/p&gt;
&lt;p&gt;A continuación voy a leerme el libro &lt;a href=&quot;https://www.goodreads.com/book/show/13507787-practical-object-oriented-design-in-ruby&quot; target=&quot;_blank&quot;&gt;&quot;Practical Object-Oriented Design in Ruby&quot;&lt;/a&gt;, de Sandi Metz. Os iré contando!&lt;/p&gt;</content><author><name>Antonio de la Torre</name></author><summary type="html">Kata del Juego de la Vida de Conway
En mis primeras semanas en Codesai he hecho la kata del Juego de la Vida de Conway como parte de mi formación para empaparme de la cultura y valores de la empresa.
La hice dos veces: la primera ha sido TDD inside-out en Javascript con Karma, Mocha y Chai, y la segunda TDD outside-in con Groovy y Spock. Dejo aquí mis enlaces al github donde se ve en cada commit qué decisiones he ido tomando siguiendo el ciclo: ROJO -&amp;gt; VERDE -&amp;gt; REFACTOR.
Para ver una buena explicación de las diferencias de hacer TDD inside-out e outside-in, podéis leer este post: TDD: Outside-In vs Inside-Out en el fantástico blog de Adictos al Trabajo.
Después de hacer estas dos katas, he leído el libro “Understanding the 4 rules of simple design” y he comparado mis decisiones.
Lo que viene a continuación no es un resumen, son comentarios de lo que más me ha llamado la atención, así que te recomiendo leer el libro antes de seguir. Es corto, en un día lo tienes hecho.
Resumen y comentarios del libro “Understanding the 4 rules of simple design”
El libro empieza muy fuerte, con los prólogos de Kent Beck y J. B. Rainsberger de los que se sacan auténticas perlas:
Foreword from Kent Beck
Is wrong “Design for the future. Change is expensive. Make it cheap by anticipating it.”
This looked like a positive feedback loop to me: more speculation -&amp;gt; worse design -&amp;gt; more speculation.
The good news about disastrous positive feedback loops is that you can generally drive them backwards. I first experimented by ignoring any changes that seemed like they would happen longer than six month in the future. My designs were simpler, I started making progress sooner, and I stressed less about the unknowable future. I shortened the time horizon to three months. More better.
One month. More. A week. A day. Oh, hell, what happens if I don’t add any design elements
Es muy gráfico cómo relata una especie de evolución de su pensamiento sobre qué pasaría si no adelantamos nada de supuestos futuros.
Buceando un poco desde el enlace que da en el prólogo, llegué a un artículo de Martin Fowler sobre estas reglas de diseño donde pone la siguiente cita de Kent Beck:
At the time there was a lot of “design is subjective”, “design is a matter of taste” bullshit going around. I disagreed. There are better and worse designs. These criteria aren’t perfect, but they serve to sort out some of the obvious crap and (importantly) you can evaluate them right now. 
The real criteria for quality of design, “minimizes cost (including the cost of delay) and maximizes benefit over the lifetime of the software,” can only be evaluated post hoc, and even then any evaluation will be subject to a large bag full of cognitive biases. The four rules are generally predictive.
-- Kent Beck
Creo que define muy bien lo que significan las buenas prácticas: Estos criterios no son perfectos, pero sirven para detectar algo de la basura más obvia y (lo más importante) puedes evaluarlo inmediatamente.
En un entorno de trabajo donde cualquier decisión es cuestionable, tener reglas básicas para distinguir el ‘crap-code’ ayuda mucho a las conversaciones dentro del equipo
Foreword from J. B. Reinsberger
El siguiente prólogo está realmente bien. Pues ayuda a profundizar y hacerte una idea de las conversaciones que puede haber detrás de algo aparentemente tan sencillo como las cuatro reglas.
Destaco como antes, no textos del prólogo, sino de los posts relacionados de JB. Son mencionados en numerosas ocasiones por todos los autores vistos hasta ahora y se recomiendan incluso por Corey Haines en el propio libro.
The four elements of simple design
When I find fifteen lines of duplicate code, I start by extracting them to a new method, and since I probably don’t yet know what those lines of code do yet, I name the new method foo(). After around 15 minutes of working in the same area, I begin to understand what this method does, so I give it an accurate name, such as computeCost().
[...]
That leaves me with two key elements of simple design: remove duplication and fix bad names. When I remove duplication, I tend to see an appropriate structure emerge, and when I fix bad names, I tend to see responsibilities slide into appropriate parts of the design.
[...]
I claim that developing strong skills of detecting duplication, removing duplication, identifying naming problems, and fixing naming problems equates to learning everything ever written about object-oriented design.
Este post es oro puro, el primer párrafo me encanta, pues dar nombres a métodos o clases, es la tarea más difícil del desarrollo. Aquí da una pista muy buena.
El siguiente post relacionado de JB, es la continuación del anterior, e intenta cerrar la ‘guerra’ abierta sobre el orden de importancia de las cuatro reglas.
Putting an age old battle to rest
I don’t think it matters whether you focus first on removing duplication or on revealing intent/increasing clarity, because these two guidelines very quickly form a rapid, tight feedback cycle. By the time the guidelines guide you to any useful results, you’ll have probably used them both. Therefore, order the rules however you like, because you’ll get to the same place either way.
...
When we remove duplication, we create buckets; when we improve names, we create more cohesive, more easily-abstracted buckets.
...
Now, I think of them as a single guideline: remove duplication and improve names in small cycles. When I do this, I produce a higher proportion of  well-factored code compared to all the code I write.
...
Removing duplication and improving names helps me reduce the liability (cost) of the code that I write. Together, they help me reduce both the total cost and the volatility of the cost of the features I deliver.
En estos tres párrafos habla de tres temas muy potentes:

Cerrar la guerra sobre el orden
Cohesión
Coste

Introduction: This book
Me encanta esta introducción. Habla con más claridad de lo que hemos visto hasta ahora: cómo las cuatro reglas se retroalimentan, incidiendo en lo comentado por JB.
Recalca como Kent Beck que no ve que haya diseños buenos y malos, e incluso que puede haber varios buenos diseños. A partir de ahí, comparándolos se podría llegar a un consenso de las ideas fundamentales de por qué un diseño es &quot;mejor&quot; que otro.
If we can look at things from a comparison point of view, perhaps we can find some fundamental ideas about “better”.
Termina formulando las dos constantes en el desarrollo de software, acompañado de un tweet de Sandi Metz: “Habrá cambios pero no sabemos qué es lo que va a cambiar”
Examples
A continuación entramos en materia del libro con diferentes ejemplos divididos en capítulos (respeto los títulos en inglés), como si fuéramos construyendo desde cero el Juego de la Vida.
Test Names Should Influence Object’s API
// Test: Check world is empty
// NO
world.cell_alive_at(1,1)?
// YES
world.empty?
Hay que usar nombres de test de hablen de negocio, y construir un API apropiada. Si usamos nombres de test orientados a datos, corremos el riesgo de construir un código que expone información que no es responsabilidad de la clase. 
Duplication of Knowledge about Topology
class LivingCell
    attr_reader :location
end class

Aquí, Corey Hanes propone poner la localización dentro de la celdas, para no duplicar el conocimiento acerca de la topología del sistema, como en el código visto antes. 
Pensé en hacer esto, pero tal como estaba resolviendo el problema, no podía mover o quitar el conocimiento de la ubicación de las células fuera de la clase Grid, que está un nivel hacia afuera: lo necesitaba para recorrer la malla y calcular la siguiente iteración y para calcular el número de vecinos.
Como experimento para esta kata, la estructura de datos en la que almacené las células de la malla, una estructura de dos dimensiones, fue en un tipo List, unidimensional. Y para consumirlo, desarrollé una especie de Iterable y el acceso a un elemento concreto con paginación.
Así, el primero de los problemas que comento lo tenía resuelto, no se iba a recorrer la malla.
El segundo problema, el de calcular el número de vecinos es el que no supe cómo resolverlo. ¿Cómo podía acceder a los vecinos de un elemento, si la posición que ocupan la tiene solo los elementos? ¿Cómo accedo a un elemento concreto de la malla?
Después de terminar la kata, se me ocurrió una solución a esto. Podría haber usado métodos como .filter() sobre el List, para buscar elementos. No es muy eficiente, pero consigue lo que se quiere, abstraes la localización del Grid y se lo pasas a las células, lo probaré para la próxima.
Behavior Attractors

Whenever we have a new method — a new behavior — an important question is “where do we put it?” What type does this belong to?

Siempre que tenemos un nuevo comportamiento la pregunta es dónde lo ponemos.
En el libro recomienda no pararse demasiado a analizar dónde ubicarlo. Buscar rápidamente un sitio. Si nos encaja, perfecto; pero si no, tenemos que moverlo. Además cuanto antes para que luego con el uso no sea más difícil.
// Where do we put neighbors?
// Location seems perfect.
class Location
     attr_reader :x, :y
     def neighbors
         # calculate a list of locations
         # that are considered neighbors
      end
 end
Destaca que a través del proceso de eliminar la duplicación de conocimiento de manera agresiva es como conseguimos clases que atraigan comportamientos. Y como corolario, si intentamos eliminar esa duplicidad y no encontramos dónde colocarlo es que nos falta alguna abstracción.
En el ejemplo de código, me llamó mucho la atención poner los neighbors en Location. Porque eso significa que es un dato que se guarda, no un dato calculado al momento del tick. Interesante para explorar.
Testing State vs Testing Behavior
En este apartado habla que hay que testear el comportamiento y no el estado, y pone como ejemplo que lo primero que comprueba en la kata es:
world.empty?
Yo lo que pensé que era el primer comportamiento era algo como:
world.stable?
Es decir: &quot;¿Es el sistema estable? ¿Hay que hacer una siguiente iteración? ¿Cuál es la condición de parada?&quot;. Comentándolo con los compañeros, parece que afronté el problema desde demasiado afuera. Outside-in no quiere decir literalmente: &quot;Desde la capa más exterior, hacia dentro&quot;.
Don’t Have Tests Depend on Previous Tests
def test_an_empty_world_stays_empty_after_a_tick
     world = World.new
     next_world = world.tick
     assert_true next_world.empty?
 end
Rather new world is empty, let’s explicitly ask for an empty world.
def test_an_empty_world_stays_empty_after_a_tick
     world = World.empty
     next_world = world.tick
     assert_true next_world.empty?
 end
Si cambiamos el constructor base y devuelve otra cosa que un mundo vacío, el primer test continuará pasando. Para evitar esto, quien invoque al objeto no debería usar el constructor base con la confianza que vendrá con un estado específico, y menos en la preparación del test, debería usar un 'constructor', un 'builder', para crear un objeto con un estado concreto y válido.
Esto me parece simplemente genial. Dejar de confiar en los constructores y crear builders que te den el objeto en el estado deseado. Es un problema que me encuentro de manera recurrente, no confío en los datos que tengo al preparar un test.
Breaking Abstraction Level
def test_world_is_not_empty_after_adding_a_cell
     world = World.empty
     world.set_living_at(Location.new(1,1))
     assert_false world.empty?
end

Este tests está acoplado a una capa de abstracción que no es la suya, por lo que si se cambia el sistema de coordenadas a tres dimensiones, por ejemplo, fallarán tests que no tienen nada que ver.
El libro recomienda en este caso hacer un doble de test que abstraiga de ese detalle. Otra opción puede ser usar un helper que de cree ese objeto de coordenadas y así solo está definido en un sitio.
def test_world_is_not_empty_after_adding_a_cell
    world = World.empty
    world.set_living_at(Object.new)
    assert_false world.empty?
end

Este tipo de problemas nos hacen ver todos los puntos de contacto que tienen nuestros objetos con los demás.
Naive Duplication
Muy interesante esta sección en la que veremos las diferencias entre duplicidad de código y duplicidad de lógica de negocio.
Vamos a observar las condiciones para que una célula viva en la siguiente generación:
class Cell
    # ...
    def alive_in_next_generation?
        if alive
            number_of_neighbors == 2 ||
            number_of_neighbors == 3
        else
            number_of_neighbors == 3
        end
    end
end

Podríamos refactorizar este código:
// An optimization of is_alive condition
class Cell
    # ...
    def alive_in_next_generation?
        (alive &amp;amp;&amp;amp; number_of_neighbors == 2) ||
            number_of_neighbors == 3
    end
end

Con este refactor de código recordamos una de las cuatro reglas: &quot;El conocimiento se debe representar una y solamente una vez&quot;.
Every piece of knowledge has one and only one representation.
Mirando otra vez al código original podemos ver que esos 3s no significan lo mismo.
Recomienda que una buena técnica para no caer en este error, sería nombrar de forma explícita los conceptos antes de refactorizar.
class Cell
    # ...
    def alive_in_next_generation?
        if alive
            stable_neighborhood?
        else
            genetically_fertile_neighborhood?
        end
    end
end
Así se ve mucho mejor y en caso de cambiar las condiciones de supervivencia, accedemos a reglas de negocio directamente.
En mi código no hice refactor porque me di cuenta que no era el mismo conocimiento, pero no extraje a un método cada comportamiento, interesante apunte para la próxima.
Procedural Polymorphism
El if en el código del apartado anterior diferencia los casos comprobando el valor del estado:
if state == ALIVE
...

En esta sección destaca que el uso de variables de estado es un indicio de que no se ha entendido el negocio. Interesante.
¿Cómo resolvemos esto? Nos presenta el Polimorfismo, como una técnica que nos da la posibilidad de llamar a un único método y tener más de un posible comportamiento. Si usamos ifs para hacer estas diferencias le llama Procedural Polymorphism.
Cuando vi esto me vino a la cabeza que una buena razón para no tener cuerpos ifs muy grandes o complejos es que se podría romper el Principio Open/Close porque este método tiene más de una razón para cambiar. Deberían ser super-sencillos.
Avanzando con el polimorfismo, la OO nos da su método preferido, el Polimorfismo basado en tipos.
Así en nuestro ejemplo podemos coger el estado y trasladarlo a un par de tipos:
class LivingCell
    def alive_in_next_generation?
        # neighbor_count == 2 || neighbor_count == 3
        stable_neighborhood?
    end
end

class DeadCell
    def alive_in_next_generation?
        # neighbor_count == 3
        genetically_fertile_neighborhood?
    end
end

¡Polimorfismo! ¡Me encanta! Me parece muy mágico y elegante.
Pero Haines no lo deja ahí, no nos deja tranquilos en nuestra satisfacción. A continuación rompe el polimorfismo de este ejemplo cambiando de nombre a los métodos. ¿Por qué?
La explicación que da, es que el polimorfimo hace abstracciones muy atractivas que podrían ocultar detalles del comportamiento real de cada subtipo, siendo incorrecto ese genérico que queremos atribuirle.
Para darnos un ejemplo, se plantea la propia existencia de la clase DeadCell, pues no tendría mucho sentido si el tamaño del Grid fuera infinito.
Es muy fácil, sobre todo al principio, sacar abstracciones rápidamente y hacer una jerarquía de tipos. Pero si nos damos cuenta que es incorrecta deshacerla suele ser complicado.
Making Assumptions About Usage
La idea fundamental bajo la pregunta: &quot;¿Necesitamos esta abstracción?&quot; es: &quot;El uso influencia la estructura&quot;. Propone que hay que construir nuestra lógica de negocio y las abstracciones que usemos motivadas por el uso que hagamos.
Unwrapping an Object
Partiendo de este trozo de código que muestra una solución para contar los vecinos de una célula:
class Location
    attr_reader :x, :y
end

location1 = Location.new(1, 1)
location2 = Location.new(1, 2)

if location1.equals?(location2)
    # Do something interesting
end

Para hacer ese &quot;algo interesante&quot; tenemos que saber si las dos posiciones son iguales. Y generalmente haríamos algo como esto:
class Location
    attr_reader :x, :y
    def equals?(other_location)
        self.x == other_location.x &amp;amp;&amp;amp;
        self.y == other_location.y
    end
end

location1.equals?(location2)

¿Qué sucedería si aplicamos en la kata la restricción (muy potente) de &quot;Nuestras funciones no pueden retornar valores&quot;?
Tendríamos que transformar este código para que cumpla el 'Tell, don’t ask' y confiar en los objetos para que hagan un trabajo que generalmente haríamos nosotros.
Para ello propone una solución muy interesante, el uso de lambdas: le decimos al .equals? lo que queremos que ejecute si se cumple la condición.
count_of_locations = 0
location1.equals?(location2, -&amp;gt; { count_of_locations++ })

class Location
    attr_reader :x, :y
    def equals?(other_location, if_equal)
        other_location.equals_coordinate?(self.x, self.y, if_equal)
        nil
    end

    def equals_coordinate?(other_x, other_y, if_equal)
        if self.x == other_x &amp;amp;&amp;amp; self.y == other_y
            if_equal.()
        end
            nil
    end
end

Es de destacar que como no podemos retornar nada, hay que invocar a other_location con la lambda, para que lo ejecute.
Me ha encantado encontrarme el uso de funciones anónimas en este ejemplo; creo que combinándolo con el apartado anterior de &quot;Romper el nivel de abstracción&quot; puede quedar un código con menos efectos laterales.
Inverted Composition as a Replacement for Inheritance
Volvemos al ejemplo anterior del polimorfismo:
// Let’s create mother class
class Cell
    attr_reader :location
end

class LivingCell &amp;lt; Cell
end

class DeadCell &amp;lt; Cell
end

Esta extracción al crear el padre no introduce un nuevo concepto de dominio. La herencia es a menudo utilizada como una forma de &quot;reusar&quot; más que para eliminar duplicidades.
Es un error común crear clases 'base' de este estilo, que pueden llegar a ser un contenedor de comportamientos muy poco relacionados.
Si la herencia no es un solución, ¿qué otras opciones tenemos?
En el ejemplo usa módulos de Ruby, y en otros lenguajes tendríamos Traits (Groovy) y en otros algo como los decoradores.
class LivingCell
    include HasLocation
end

class DeadCell
    include HasLocation
end

Llegados a este punto, con la duplicidad medio resuelta, vemos que tenemos dos clases apuntando al mismo tipo, (Living|Dead)Cell a Location.
Una técnica útil es Invertir la dependencia, que la localización apunte a las células.
class Location
    attr_reader :x, :y
    attr_reader :cell
end 

class LivingCell
    def stays_alive?(number_of_neighbors)
        number_of_neighbors == 2 ||
        number_of_neighbors == 3
    end 
end 

class DeadCell
    def comes_to_life?(number_of_neighbors)
        number_of_neighbors == 3
    end
end

De esta manera, las clases que representan células están únicamente centradas en la información que les atañe, como las reglas sobre cómo evolucionan.
También hemos extraído la topología de las reglas del juego, viendo que el tipo Location tiene un rol de estructura, que une la malla con la célula.
Comparándo con mi código, la composición invertida es muy similar a la solución que había propuesto yo inicialmente en la kata: Grid -&amp;gt; Position -&amp;gt; Info
Como 'Rule of Thumb' la dependencia de clases debe ir desde la que más cambia a la que menos cambia, desde la menos estable a la más estable, es decir, la dependencia la tiene que tener aquella que tiene más posibilidades de cambiar sus atributos.
Conclusión
Programar el Juego de la Vida de dos maneras diferentes y luego leerme este libro ha resultado ser un ejercicio muy intenso y productivo. ¡Y escribir este post, claro!
Me llevo un buen montón de herramientas.
A continuación voy a leerme el libro &quot;Practical Object-Oriented Design in Ruby&quot;, de Sandi Metz. Os iré contando!</summary></entry><entry><title type="html">Kata: object literal to query string</title><link href="https://codesai.aerobatic.io/2016/09/kata-object-literal-to-query-string" rel="alternate" type="text/html" title="Kata: object literal to query string" /><published>2016-09-07T20:29:20+00:00</published><updated>2016-09-07T20:29:20+00:00</updated><id>https://codesai.aerobatic.io/2016/09/kata-object-literal-to-query-string</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/09/kata-object-literal-to-query-string">&lt;p&gt;No long ago, we had to write a function that takes an object and returns a string to be sent as part of the query string in the request. This was because the communication mechanism was &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot; target=&quot;_blank&quot;&gt;JSONP&lt;/a&gt; that works via the GET method. The server was already expecting the specific format shown below and we didn't have access to the server in order to change it and accept just an URL-encoded JSON. The fun started when we realised that an object may be a tree structure with nested objects. We test-drove the solution and found it interesting as a code kata. This is the expected behavior of the function:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Suui/2dc92868812dbcec05d94daffa8d418a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is our implementation:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Suui/e853998ca19d172c6398e4147e8ef2b2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note that the object can't contain arrays neither functions.&lt;/p&gt;
&lt;p&gt;Play with the code in &lt;a href=&quot;https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-2&amp;code=function%20objectToQueryString(obj)%7B%0A%20%20%20%20%20if%20(isNotConvertible(obj))%20return%20%22%22%3B%0A%20%0A%20%20%20%20%20let%20queryString%20%3D%20%22%22%3B%0A%20%20%20%20%20for%20(let%20propertyName%20in%20obj)%7B%0A%20%20%20%20%20%20%20%20%20let%20propertyValue%20%3D%20obj%5BpropertyName%5D%3B%0A%20%20%20%20%20%20%20%20%20if%20(isAnObject(propertyValue))%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20let%20convertedNestedProperties%20%3D%20objectToQueryString(propertyValue)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.split('%26')%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20let%20surroundedProperties%20%3D%20surroundNestedWithBrackets(%0A%09%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20propertyName%2C%20%0A%09%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20convertedNestedProperties)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20queryString%20%2B%3D%20surroundedProperties.join('%26')%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20queryString%20%2B%3D%20%60%24%7BpropertyName%7D%3D%24%7BpropertyValue%7D%60%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20queryString%20%2B%3D%20'%26'%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20return%20removeLastAmpersand(queryString)%3B%0A%20%7D%0A%20%0A%20function%20surroundNestedWithBrackets(propertyName%2C%20nestedProperties)%7B%0A%20%20%20%20%20let%20surrounded%20%3D%20%5B%5D%3B%0A%20%20%20%20%20for(let%20i%20%3D%200%3B%20i%20%3C%20nestedProperties.length%3B%20i%2B%2B)%7B%0A%20%20%20%20%20%20%20%20%20let%20nested%20%20%3D%20nestedProperties%5Bi%5D%2C%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20nestedName%2C%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20nestedValue%3B%0A%20%20%20%20%20%20%20%20%20let%20isNestedObject%20%3D%20nested.indexOf('%5B')%20%3E%3D%200%3B%0A%20%20%20%20%20%20%20%20%20if%20(isNestedObject)%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20nestedName%20%3D%20substringUntil('%5B'%2C%20nested)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20nestedValue%20%3D%20substringFrom('%5B'%2C%20nested)%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20nestedName%20%3D%20substringUntil('%3D'%2C%20nested)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20nestedValue%20%3D%20substringFrom('%3D'%2C%20nested)%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20surrounded.push(%60%24%7BpropertyName%7D%5B%24%7BnestedName%7D%5D%24%7BnestedValue%7D%60)%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20return%20surrounded%3B%0A%20%7D%0A%20%0A%20function%20substringUntil(symbol%2C%20text)%7B%0A%20%20%20%20%20return%20text.substring(0%2C%20text.indexOf(symbol))%3B%0A%20%7D%0A%20%0A%20function%20substringFrom(symbol%2C%20text)%7B%0A%20%20%20%20%20return%20text.substring(text.indexOf(symbol))%3B%0A%20%7D%0A%20%0A%20function%20isNotConvertible(obj%20)%7B%0A%20%20%20%20%20return%20!obj%20%20%7C%7C%0A%20%20%20%20%20%20%20%20%20typeof(obj)%20!%3D%20'object'%20%7C%7C%0A%20%20%20%20%20%20%20%20%20JSON.stringify(obj)%20%3D%3D%22%7B%7D%22%3B%0A%20%7D%0A%20%0A%20function%20isAnObject(val)%7B%0A%20%20%20%20%20return%20typeof(val)%20%3D%3D%20'object'%3B%0A%20%7D%0A%20%0A%20function%20removeLastAmpersand(queryString)%7B%0A%20%20%20%20%20if%20(queryString.lastIndexOf(%22%26%22)%20%3D%3D%20queryString.length%20-1)%7B%0A%20%20%20%20%20%20%20%20%20return%20queryString.substring(0%2C%20queryString.length%20-1)%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20return%20queryString%3B%0A%20%7D%0Aconsole.log(objectToQueryString(%7Ba%3A1%2C%20b%3A2%2C%20c%3A%7Bd%3A4%2C%20e%3A%7Bx%3A%7Bz%3A5%7D%2C%20h%3A7%7D%7D%7D))%3B%0A%0A%0A%0A&quot; target=&quot;_blank&quot;&gt;the Babel Repl&lt;/a&gt;.&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">No long ago, we had to write a function that takes an object and returns a string to be sent as part of the query string in the request. This was because the communication mechanism was JSONP that works via the GET method. The server was already expecting the specific format shown below and we didn't have access to the server in order to change it and accept just an URL-encoded JSON. The fun started when we realised that an object may be a tree structure with nested objects. We test-drove the solution and found it interesting as a code kata. This is the expected behavior of the function:



This is our implementation:



Note that the object can't contain arrays neither functions.
Play with the code in the Babel Repl.</summary></entry><entry><title type="html">Antonio de la Torre se une a Codesai</title><link href="https://codesai.aerobatic.io/2016/08/antonio-de-la-torre-se-une-a-codesai" rel="alternate" type="text/html" title="Antonio de la Torre se une a Codesai" /><published>2016-08-23T10:17:27+00:00</published><updated>2016-08-23T10:17:27+00:00</updated><id>https://codesai.aerobatic.io/2016/08/antonio-de-la-torre-se-une-a-codesai</id><content type="html" xml:base="https://codesai.aerobatic.io/2016/08/antonio-de-la-torre-se-une-a-codesai">&lt;p&gt;&lt;a href=&quot;http://www.codesai.com/wp-content/uploads/2016/08/P1190246.jpg&quot;&gt;&lt;img class=&quot;wp-image-2934 size-large&quot; src=&quot;/assets/P1190246-1024x768.jpg&quot; alt=&quot;Foto de equipo&quot; /&gt;&lt;/a&gt; Miguel, Antonio, Carlos, Jose - Tenerife, Julio 2016&lt;/p&gt;
&lt;p&gt;Estamos de celebración, super &lt;a href=&quot;https://about.me/adelatorrefoss&quot; target=&quot;_blank&quot;&gt;Antonio de la Torre&lt;/a&gt; forma parte del equipo Codesai desde esta misma semana. Antonio &lt;a href=&quot;https://adelatorrefoss.wordpress.com/2016/07/30/cierre-de-ciclo/&quot; target=&quot;_blank&quot;&gt;ya había decidido&lt;/a&gt; que se volvía a su tierra (Oviedo) con la familia cuando nos encontramos en JSDay 2016 y estuvimos charlando. Me contó sus planes y ví que nos podía encajar muy bien en Codesai, donde necesitabamos crecer en vista de la alianza con Kairós. La actitud de Antonio nos gustó a todo el equipo, su madurez, su empatía y como no, su experiencia con métodos ágiles. Cualquiera que haya hablado un rato con Antonio sabe que tiene una mente abierta y predisposición para ayudar a los demás. Desde el JSDay nos pusimos a trabajar para alinearnos en el plano más técnico. Hicimos una kata de programación en remoto, Antonio se leyó algunos libros que le recomendamos, y encima nos fuimos juntos al evento Software Craftsmanship de Pamplona (donde fuimos compañeros de habitación) y al AOS de Galicia. Tras los eventos, Antonio vino al curso de TDD que impartió Luis en Madrid y a la semana siguiente vino al que impartí yo en Tenerife. Así hicimos entrevista técnica y training, todo en uno, en un proceso que ha durado varios meses. Durante todos estos encuentros, absolutamente todos los miembros del equipo han podido conocer en persona a Antonio, pese a que estamos distribuidos en diferentes provincias. Estamos realmente contentos y nos sentimos afortunados de contar con Antonio en el equipo. Es una nueva etapa que nos hará crecer a todos.&lt;/p&gt;
&lt;p&gt;El equipo Codesai ha crecido relativamente rápido pero sin buscarlo. Ahora el reto es mantenerlo y hacer más piña cada día. Hacer del equipo un instrumento que ayude a mejorar la industria del desarrollo de software y por qué no, tambien aportar nuestro granito de arena a la sociedad.&lt;/p&gt;</content><author><name>Carlos Blé</name></author><summary type="html">Miguel, Antonio, Carlos, Jose - Tenerife, Julio 2016
Estamos de celebración, super Antonio de la Torre forma parte del equipo Codesai desde esta misma semana. Antonio ya había decidido que se volvía a su tierra (Oviedo) con la familia cuando nos encontramos en JSDay 2016 y estuvimos charlando. Me contó sus planes y ví que nos podía encajar muy bien en Codesai, donde necesitabamos crecer en vista de la alianza con Kairós. La actitud de Antonio nos gustó a todo el equipo, su madurez, su empatía y como no, su experiencia con métodos ágiles. Cualquiera que haya hablado un rato con Antonio sabe que tiene una mente abierta y predisposición para ayudar a los demás. Desde el JSDay nos pusimos a trabajar para alinearnos en el plano más técnico. Hicimos una kata de programación en remoto, Antonio se leyó algunos libros que le recomendamos, y encima nos fuimos juntos al evento Software Craftsmanship de Pamplona (donde fuimos compañeros de habitación) y al AOS de Galicia. Tras los eventos, Antonio vino al curso de TDD que impartió Luis en Madrid y a la semana siguiente vino al que impartí yo en Tenerife. Así hicimos entrevista técnica y training, todo en uno, en un proceso que ha durado varios meses. Durante todos estos encuentros, absolutamente todos los miembros del equipo han podido conocer en persona a Antonio, pese a que estamos distribuidos en diferentes provincias. Estamos realmente contentos y nos sentimos afortunados de contar con Antonio en el equipo. Es una nueva etapa que nos hará crecer a todos.
El equipo Codesai ha crecido relativamente rápido pero sin buscarlo. Ahora el reto es mantenerlo y hacer más piña cada día. Hacer del equipo un instrumento que ayude a mejorar la industria del desarrollo de software y por qué no, tambien aportar nuestro granito de arena a la sociedad.</summary></entry></feed>
